
                    Pickering Interfaces PXI/LXI IVI Switch
________________________________________________________________________________

  Introduction:

  This instrument driver provides programming support for Pickering Interfaces PXI/LXI IVI Switch.
  It contains functions for opening, configuring, taking measurements from, and
  closing the instrument.

________________________________________________________________________________

  Assumptions:

  To successfully use this module, the following conditions must be met:

  For GPIB instrument drivers:
         -  the instrument is connected to the GPIB.
         -  the GPIB address supplied to the initialize function must match the
            GPIB address of the instrument.

  For VXI instrument drivers:
         -  the instrument is installed in the VXI mainframe and you are
            using one of the following controller options:
                  Embedded controller
                  MXI
                  MXI2
                  GPIB-VXI
         -  the logical address supplied to the initialize function must
            match the logical address of the instrument.

  For RS-232 instrument drivers:
         -  the instrument is connected to the RS-232 interface.
         -  the COM port, baud rate, parity, and timeout supplied to the
            initialize function must match the settings of the instrument.

________________________________________________________________________________

  Error and Status Information:

  Each function in this instrument driver returns a status code that
  either indicates success or describes an error or warning condition.
  Your program should examine the status code from each call to an
  instrument driver function to determine if an error occurred.
  The general meaning of the status code is as follows:

       Value                  Meaning
       -------------------------------
       0                      Success
       Positive Values        Warnings
       Negative Values        Errors

  The description of each instrument driver function lists possible error
  codes and their meanings

________________________________________________________________________________

  How To Use This Document:

  Use this document as a programming reference manual.
  It describes each function in the

                    Pickering Interfaces PXI/LXI IVI Switch

  instrument.  The functions appear in alphabetical order, with a description
  of the function and its C syntax, a description of each parameter, and a list
  of possible error codes.

________________________________________________________________________________

Function Tree Layout:

   Class/Panel Name:                        Function Name:

      Initialize                            pi40iv_init
      Initialize With Options               pi40iv_InitWithOptions
      Configuration
         Set/Get/Check Attribute
            Get Attribute
               Get Attribute ViInt32        pi40iv_GetAttributeViInt32
               Get Attribute ViReal64       pi40iv_GetAttributeViReal64
               Get Attribute ViString       pi40iv_GetAttributeViString
               Get Attribute ViBoolean      pi40iv_GetAttributeViBoolean
               Get Attribute ViSession      pi40iv_GetAttributeViSession
            Set Attribute
               Set Attribute ViInt32        pi40iv_SetAttributeViInt32
               Set Attribute ViReal64       pi40iv_SetAttributeViReal64
               Set Attribute ViString       pi40iv_SetAttributeViString
               Set Attribute ViBoolean      pi40iv_SetAttributeViBoolean
               Set Attribute ViSession      pi40iv_SetAttributeViSession
            Check Attribute
               Check Attribute ViInt32      pi40iv_CheckAttributeViInt32
               Check Attribute ViReal64     pi40iv_CheckAttributeViReal64
               Check Attribute ViString     pi40iv_CheckAttributeViString
               Check Attribute ViBoolean    pi40iv_CheckAttributeViBoolean
               Check Attribute ViSession    pi40iv_CheckAttributeViSession
      Pickering
         Sub Information
            Get Sub Info                    pi40iv_SubInfo
            Get Number of Input Subs        pi40iv_GetNumberInputSubs
            Get Input Size Bits             pi40iv_GetInputSizeBits
            Get Input Size Dwords           pi40iv_GetInputSizeDwords
            Get Input Bit                   pi40iv_GetInputBit
            Get Input Sub                   pi40iv_GetInputSub
            Get Number of Output Subs       pi40iv_GetNumberOutputSubs
            Get Output Size Bits            pi40iv_GetOutputSizeBits
            Get Output Size Dwords          pi40iv_GetOutputSizeDwords
            Set Output Bit                  pi40iv_SetOutputBit
            Set Output Sub                  pi40iv_SetOutputSub
            Get Output Bit                  pi40iv_GetOutputBit
            Get Output Sub                  pi40iv_GetOutputSub
         Resistors
            Write Calibration               pi40iv_WriteCal
            Read Calibration                pi40iv_ReadCal
            Set Resistance                  pi40iv_SetResistance
            Get Resistance                  pi40iv_GetResistance
         Get Matrix Split                   pi40iv_GetMatrixSplit
      Route
         Connect Channels                   pi40iv_Connect
         Disconnect Channels                pi40iv_Disconnect
         Disconnect All Channels            pi40iv_DisconnectAll
         Switch Is Debounced?               pi40iv_IsDebounced
         Wait For Debounce                  pi40iv_WaitForDebounce
         Can Connect Channels?              pi40iv_CanConnect
         Paths
            Set Path                        pi40iv_SetPath
            Get Path                        pi40iv_GetPath
      Utility
         Get Channel Name                   pi40iv_GetChannelName
         Reset                              pi40iv_reset
         Self-Test                          pi40iv_self_test
         Revision Query                     pi40iv_revision_query
         Error-Query                        pi40iv_error_query
         Error Message                      pi40iv_error_message
         Error Info
            Get Error Info                  pi40iv_GetErrorInfo
            Clear Error Info                pi40iv_ClearErrorInfo
         Coercion Info
            Get Next Coercion Record        pi40iv_GetNextCoercionRecord
         Locking
            Lock Session                    pi40iv_LockSession
            Unlock Session                  pi40iv_UnlockSession
      Close                                 pi40iv_close
________________________________________________________________________________

  Pickering Interfaces PXI/LXI IVI Switch

      This instrument driver contains programming support for the Pickering
      Interfaces PXI IVI Switch.  This driver has all the functions that IVI
      and VXIplug&play require.
      
      Note:  This driver requires the VISA and IVI libraries.
________________________________________________________________________________

              The following functions are in alphabetical order.

________________________________________________________________________________

  pi40iv_CanConnect

      ViStatus pi40iv_CanConnect (ViSession instrumentHandle,
                                  ViChar _VI_FAR channel1[],
                                  ViChar _VI_FAR channel2[],
                                  ViPInt32 pathCapability);

  Purpose

      This function verifies that the switch module is capable of creating a
      path between the two channels you specify with the Channel 1 and Channel
      2 parameters.  If the switch module is capable of creating a path, this
      function indicates whether the path is currently available given the
      existing connections.
      
      If the path is not available due to the currently existing connections,
      but the implicit connection between the two channels already exists, the
      function returns the PI40IV_WARN_IMPLICIT_CONNECTION_EXISTS (0x3FFA2002)
      warning.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None

      channel1

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to verify a path. Pass the other channel name as
          the Channel 2 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

      channel2

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to verify a path. Pass the other channel name as
          the Channel 1 parameter.
          
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

      pathCapability

          Variable Type       ViInt32 (passed by reference)

          Indicates whether a path is valid. Possible values include:
          
          Status Name                           Actual Value
          --------------------------------------------------
          PI40IV_VAL_PATH_AVAILABLE         1
          PI40IV_VAL_PATH_EXISTS            2
          PI40IV_VAL_PATH_UNSUPPORTED       3
          PI40IV_VAL_RSRC_IN_USE            4
          PI40IV_VAL_SOURCE_CONFLICT        5
          PI40IV_VAL_CHANNEL_NOT_AVAILABLE  6
          
          Notes:
          
          (1) PI40IV_VAL_PATH_AVAILABLE indicates that the driver can create
          the path at this time.
          
          (2) PI40IV_VAL_PATH_EXISTS indicates that the path already exists.
          
          (3) PI40IV_VAL_PATH_UNSUPPORTED indicates that the instrument is not
          capable of creating a path between the channels you specify.
          
          (4) PI40IV_VAL_RSRC_IN_USE indicates that although the path is valid,
          the driver cannot create the path at this moment because the switch
          module is currently using one or more of the required channels to
          create another path. You must destroy the other path before creating
          this one.
          
          (5) PI40IV_VAL_SOURCE_CONFLICT indicates that the instrument cannot
          create a path because both channels are connected to a different
          source channel.
          
          (6) PI40IV_VAL_CHANNEL_NOT_AVAILABLE indicates that the driver cannot
          create a path between the two channels because one of the channels is
          a configuration channel and thus unavailable for external
          connections.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_CheckAttributeViBoolean

      ViStatus pi40iv_CheckAttributeViBoolean (ViSession instrumentHandle,
                                               ViChar _VI_FAR channelName[],
                                               ViAttr attributeID,
                                               ViBoolean attributeValue);

  Purpose

      This function checks the validity of a value you specify for a ViBoolean
      attribute.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to check the attribute value. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViBoolean
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViBoolean are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViBoolean

          Pass the value which you want to verify as a valid value for the
          attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_CheckAttributeViInt32

      ViStatus pi40iv_CheckAttributeViInt32 (ViSession instrumentHandle,
                                             ViChar _VI_FAR channelName[],
                                             ViAttr attributeID,
                                             ViInt32 attributeValue);

  Purpose

      This function checks the validity of a value you specify for a ViInt32
      attribute.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to check the attribute value. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViInt32 type.
            If you choose to see all IVI attributes, the data types appear
            to the right of the attribute names in the list box.
            Attributes with data types other than ViInt32 are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViInt32

          Pass the value which you want to verify as a valid value for the
          attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_CheckAttributeViReal64

      ViStatus pi40iv_CheckAttributeViReal64 (ViSession instrumentHandle,
                                              ViChar _VI_FAR channelName[],
                                              ViAttr attributeID,
                                              ViReal64 attributeValue);

  Purpose

      This function checks the validity of a value you specify for a ViReal64
      attribute.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to check the attribute value. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViReal64
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViReal64 are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViReal64

          Pass the value which you want to verify as a valid value for the
          attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_CheckAttributeViSession

      ViStatus pi40iv_CheckAttributeViSession (ViSession instrumentHandle,
                                               ViChar _VI_FAR channelName[],
                                               ViAttr attributeID,
                                               ViSession attributeValue);

  Purpose

      This function checks the validity of a value you specify for a ViSession
      attribute.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to check the attribute value. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViSession
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViSession are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViSession

          Pass the value which you want to verify as a valid value for the
          attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_CheckAttributeViString

      ViStatus pi40iv_CheckAttributeViString (ViSession instrumentHandle,
                                              ViChar _VI_FAR channelName[],
                                              ViAttr attributeID,
                                              ViChar _VI_FAR attributeValue[]);

  Purpose

      This function checks the validity of a value you specify for a ViString
      attribute.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to check the attribute value. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViString
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViString are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViChar[]

          Pass the value which you want to verify as a valid value for the
          attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_ClearErrorInfo

      ViStatus pi40iv_ClearErrorInfo (ViSession instrumentHandle);

  Purpose

      This function clears the error information for the current execution
      thread and the IVI session you specify.  If you pass VI_NULL for the
      Instrument Handle parameter, this function clears the error information
      only for the current execution thread.
      
      The error information includes a primary error code, secondary error
      code, and an error elaboration string.  For a particular session, this
      information is the same as the values held in the following attributes:
      
      PI40IV_ATTR_PRIMARY_ERROR
      PI40IV_ATTR_SECONDARY_ERROR
      PI40IV_ATTR_ERROR_ELABORATION
      
      This function sets the primary and secondary error codes to VI_SUCCESS
      (0), and sets the error elaboration string to "".
      
      The IVI Library also maintains this error information separately for each
      thread.  This is useful if you do not have a session handle to pass to
      pi40iv_ClearErrorInfo or pi40iv_GetErrorInfo, which occurs when a call to
      pi40iv_init or pi40iv_InitWithOptions fails.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_close

      ViStatus pi40iv_close (ViSession instrumentHandle);

  Purpose

      This function performs the following operations:
      
      - Closes the instrument I/O session.
      
      - Destroys the instrument driver session and all of its attributes.
      
      - Deallocates any memory resources the driver uses.
      
      Notes:
      
      (1) You must unlock the session before calling pi40iv_close.
      
      (2) After calling pi40iv_close, you cannot use the instrument driver
      again until you call pi40iv_init or pi40iv_InitWithOptions.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_Connect

      ViStatus pi40iv_Connect (ViSession instrumentHandle,
                               ViChar _VI_FAR channel1[],
                               ViChar _VI_FAR channel2[]);

  Purpose

      This function creates a path between Channel 1 and Channel 2.  The driver
      calculates the shortest path between the two channels.
      
      /*=CHANGE:====================================================*/
          Add comments here about possible connections for your instrument.
      /*==================================================END=CHANGE*/
      
      If a path is not available, the function returns one of the following
      errors:
      
      PI40IV_ERROR_EXPLICIT_CONNECTION_EXISTS (0xBFFA200C), if the two channels
                        are already explicitly connected by calling
                        either the pi40iv_Connect or
                        pi40iv_SetPath function.
      
      PI40IV_ERROR_IS_CONFIGURATION_CHANNEL (0xBFFA2009), if a channel is a
                        configuration channel.  Error elaboration
                        contains information about which of the two
                        channels is a configuration channel.
      
      PI40IV_ERROR_ATTEMPT_TO_CONNECT_SOURCES (0xBFFA200B), if both channels
      are
                        connected to a different source.  Error
                        elaboration contains information about sources
                        channel 1 and 2 connect to.
      
      PI40IV_ERROR_CANNOT_CONNECT_TO_ITSELF (0xBFFA2015), if channels 1 and 2
      are
                        one and the same channel.
      
      PI40IV_ERROR_PATH_NOT_FOUND (0xBFFA2011), if the driver cannot find a
      path
                        between the two channels.
      
      Notes:
      
      (1) The paths are bidirectional. For example, if a path exists
          between channels CH1 and CH2, then the path between channels
          CH2 and CH1 also exists.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channel1

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to create a path. Pass the other channel name as
          the Channel 2 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

      channel2

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to create a path. Pass the other channel name as
          the Channel 1 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_Disconnect

      ViStatus pi40iv_Disconnect (ViSession instrumentHandle,
                                  ViChar _VI_FAR channel1[],
                                  ViChar _VI_FAR channel2[]);

  Purpose

      This function destroys the path between two channels that you create with
      the pi40iv_Connect or pi40iv_SetPath function.
      
      /*=CHANGE:====================================================*/
          Add comments here about possible connections for your instrument.
      /*==================================================END=CHANGE*/
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channel1

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          that identify the path you want to destroy. Pass the other channel
          name as the Channel 2 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      channel2

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          that identify the path you want to destroy. Pass the other channel
          name as the Channel 1 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_DisconnectAll

      ViStatus pi40iv_DisconnectAll (ViSession instrumentHandle);

  Purpose

      This function disconnects all existing paths.
      
      Note: If the switch module is not capable of disconnecting all paths,
      this function returns PI40IV_WARN_PATH_REMAINS (0x3FFA2001) warning.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_error_message

      ViStatus pi40iv_error_message (ViSession instrumentHandle,
                                     ViStatus errorCode,
                                     ViChar _VI_FAR errorMessage[]);

  Purpose

      This function converts a status code returned by an instrument driver
      function into a user-readable string.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          You can pass VI_NULL for this parameter.  This is useful when one of
          the initialize functions fail.
          
          Default Value:  VI_NULL
          

      errorCode

          Variable Type       ViStatus

          Pass the Status parameter that is returned from any of the instrument
          driver functions.
          
          Default Value:  0  (VI_SUCCESS)
          
          pi40iv Status Codes:
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          IviSwtch Status Codes:
          Status    Description
          -------------------------------------------------
          WARNINGS:
          3FFA2001  Some connections remain after disconnecting.
          3FFA2002  The channels are implicitly connected.
          
          ERRORS:
          BFFA2001  Invalid path string.
          BFFA2002  Invalid Scan List string.
          BFFA2003  One of the channels is in use.
          BFFA2004  The scan list string is empty.
          BFFA2005  The path string is empty.
          BFFA2006  The switch module is currently in scanning mode.
          BFFA2007  The switch module is not currently in scanning mode.
          BFFA2008  No explicit path exists between the two channels.
          BFFA2009  Cannot explicitly connect a configuration channel.
          BFFA200A  One path channel is not a configuration channel.
          BFFA200B  Cannot connect two sources.
          BFFA200C  The channels are explicitly connected.
          BFFA200D  A leg in the path does not begin with a channel name.
          BFFA200E  A leg in the path is missing the second channel name.
          BFFA200F  The first and second channels in the leg are the same.
          BFFA2010  Duplicate channel in the path string.
          BFFA2011  No path found between the channels.
          BFFA2012  Beginning and end of adjacent legs are not the same.
          BFFA2013  Path contains a leg with un-connectable channels.
          BFFA2014  A leg in the path is already connected.
          BFFA2015  A channel cannot be connected to itself.
          
          IVI Engine Status Codes:
          Status    Description
          -------------------------------------------------
          ERRORS:
          BFFA0001  Instrument error. Call pi40iv_error_query.
          BFFA0002  Cannot open file.
          BFFA0003  Error reading from file.
          BFFA0004  Error writing to file.
          BFFA0005  Driver module file not found.
          BFFA0006  Cannot open driver module file for reading.
          BFFA0007  Driver module has invalid file format or invalid data.
          BFFA0008  Driver module contains undefined references.
          BFFA0009  Cannot find function in driver module.
          BFFA000A  Failure loading driver module.
          BFFA000B  Invalid path name.
          BFFA000C  Invalid attribute.
          BFFA000D  IVI attribute is not writable.
          BFFA000E  IVI attribute is not readable.
          BFFA000F  Invalid parameter.
          BFFA0010  Invalid value.
          BFFA0011  Function not supported.
          BFFA0012  Attribute not supported.
          BFFA0013  Value not supported.
          BFFA0014  Invalid type.
          BFFA0015  Types do not match.
          BFFA0016  Attribute already has a value waiting to be updated.
          BFFA0017  Specified item already exists.
          BFFA0018  Not a valid configuration.
          BFFA0019  Requested item does not exist or value not available.
          BFFA001A  Requested attribute value not known.
          BFFA001B  No range table.
          BFFA001C  Range table is invalid.
          BFFA001D  Object or item is not initialized.
          BFFA001E  Non-interchangeable behavior.
          BFFA001F  No channel table has been built for the session.
          BFFA0020  Channel name specified is not valid.
          BFFA0021  Unable to allocate system resource.
          BFFA0022  Permission to access file was denied.
          BFFA0023  Too many files are already open.
          BFFA0024  Unable to create temporary file in target directory.
          BFFA0025  All temporary filenames already used.
          BFFA0026  Disk is full.
          BFFA0027  Cannot find configuration file on disk.
          BFFA0028  Cannot open configuration file.
          BFFA0029  Error reading configuration file.
          BFFA002A  Invalid ViInt32 value in configuration file.
          BFFA002B  Invalid ViReal64 value in configuration file.
          BFFA002C  Invalid ViBoolean value in configuration file.
          BFFA002D  Entry missing from configuration file.
          BFFA002E  Initialization failed in driver DLL.
          BFFA002F  Driver module has unresolved external reference.
          BFFA0030  Cannot find CVI Run-Time Engine.
          BFFA0031  Cannot open CVI Run-Time Engine.
          BFFA0032  CVI Run-Time Engine has invalid format.
          BFFA0033  CVI Run-Time Engine is missing required function(s).
          BFFA0034  CVI Run-Time Engine initialization failed.
          BFFA0035  CVI Run-Time Engine has unresolved external reference.
          BFFA0036  Failure loading CVI Run-Time Engine.
          BFFA0037  Cannot open DLL for read exports.
          BFFA0038  DLL file is corrupt.
          BFFA0039  No DLL export table in DLL.
          BFFA003A  Unknown attribute name in default configuration file.
          BFFA003B  Unknown attribute value in default configuration file.
          BFFA003C  Memory pointer specified is not known.
          BFFA003D  Unable to find any channel strings.
          BFFA003E  Duplicate channel string.
          BFFA003F  Duplicate virtual channel name.
          BFFA0040  Missing virtual channel name.
          BFFA0041  Bad virtual channel name.
          BFFA0042  Unassigned virtual channel name.
          BFFA0043  Bad virtual channel assignment.
          BFFA0044  Channel name required.
          BFFA0045  Channel name not allowed.
          BFFA0046  Attribute not valid for channel.
          BFFA0047  Attribute must be channel based.
          BFFA0048  Channel already excluded.
          BFFA0049  Missing option name (nothing before the '=').
          BFFA004A  Missing option value (nothing after the '=').
          BFFA004B  Bad option name.
          BFFA004C  Bad option value.
          BFFA004D  Operation only valid on a class driver session.
          BFFA004E  "ivi.ini" filename is reserved.
          BFFA004F  Duplicate run-time configuration entry.
          BFFA0050  Index parameter is one-based.
          BFFA0051  Index parameter is too high.
          BFFA0052  Attribute is not cacheable.
          BFFA0053  You cannot export a ViAddr attribute to the end-user.
          BFFA0054  Bad channel string in channel string list.
          BFFA0055  Bad prefix name in default configuration file.
          
          VISA Status Codes:
          Status    Description
          -------------------------------------------------
          WARNINGS:
          3FFF0002 Event enabled for one or more specified mechanisms.
          3FFF0003 Event disabled for one or more specified mechanisms.
          3FFF0004 Successful, but queue already empty.
          3FFF0005 Specified termination character was read.
          3FFF0006 Number of bytes transferred equals input count.
          3FFF0077 Configuration non-existant or could not be loaded.
          3FFF007D Open successful, but the device not responding.
          3FFF0080 Wait successful, but more event objects available.
          3FFF0082 Specified object reference is uninitialized.
          3FFF0084 Attribute value not supported.
          3FFF0085 Status code could not be interpreted.
          3FFF0088 Specified I/O buffer type not supported.
          3FFF0098 Successful,  but invoke no handlers for this event.
          3FFF0099 Successful but session has nested shared locks.
          3FFF009A Successful but session has nested exclusive locks.
          3FFF009B Successful but operation not asynchronous.
          
          ERRORS:
          BFFF0000 Unknown system error (miscellaneous error).
          BFFF000E Session or object reference is invalid.
          BFFF000F Resource is locked.
          BFFF0010 Invalid expression specified for search.
          BFFF0011 Resource is not present in the system.
          BFFF0012 Invalid resource reference specified.  Parsing error.
          BFFF0013 Invalid access mode.
          BFFF0015 Timeout expired before operation completed.
          BFFF0016 Unable to deallocate session data structures.
          BFFF001B Specified degree is invalid.
          BFFF001C Specified job identifier is invalid.
          BFFF001D Attribute is not supported by the referenced object.
          BFFF001E Attribute state not supported by the referenced object.
          BFFF001F Specified attribute is read-only.
          BFFF0020 Lock type lock not supported by this resource.
          BFFF0021 Invalid access key.
          BFFF0026 Specified event type not supported by the resource.
          BFFF0027 Invalid mechanism specified.
          BFFF0028 A handler was not installed.
          BFFF0029 Handler reference either invalid or was not installed.
          BFFF002A Specified event context invalid.
          BFFF002D Event queue for specified type has overflowed.
          BFFF002F Event type must be enabled in order to receive.
          BFFF0030 User abort during transfer.
          BFFF0034 Violation of raw write protocol during transfer.
          BFFF0035 Violation of raw read protocol during transfer.
          BFFF0036 Device reported output protocol error during transfer.
          BFFF0037 Device reported input protocol error during transfer.
          BFFF0038 Bus error during transfer.
          BFFF0039 Unable to queue asynchronous operation.
          BFFF003A Unable to start operation because setup is invalid.
          BFFF003B Unable to queue the asynchronous operation.
          BFFF003C Insufficient resources to perform memory allocation.
          BFFF003D Invalid buffer mask specified.
          BFFF003E I/O error.
          BFFF003F Format specifier invalid.
          BFFF0041 Format specifier not supported.
          BFFF0042 Trigger line is currently in use.
          BFFF004A Service request not received for the session.
          BFFF004E Invalid address space specified.
          BFFF0051 Invalid offset specified.
          BFFF0052 Invalid access width specified.
          BFFF0054 Offset not accessible from this hardware.
          BFFF0055 Source and destination widths are different.
          BFFF0057 Session not currently mapped.
          BFFF0059 Previous response still pending.
          BFFF005F No listeners condition detected.
          BFFF0060 Interface not currently the controller in charge.
          BFFF0061 Interface not the system controller.
          BFFF0067 Session does not support this operation.
          BFFF006A A parity error occurred during transfer.
          BFFF006B A framing error occurred during transfer.
          BFFF006C An overrun error occurred during transfer.
          BFFF0070 Offset not properly aligned for operation access width.
          BFFF0071 Specified user buffer not valid.
          BFFF0072 Resource valid, but VISA cannot access it.
          BFFF0076 Width not supported by this hardware.
          BFFF0078 Invalid parameter value, parameter unknown.
          BFFF0079 Invalid protocol.
          BFFF007B Invalid window size.
          BFFF0080 Session currently contains a mapped window.
          BFFF0081 Operation not implemented.
          BFFF0083 Invalid length.
          BFFF0091 Invalid mode.
          BFFF009C Session did not have a lock on the resource.
          BFFF009D The device does not export any memory.
          BFFF009E VISA-required code library not located or not loaded.
          
          VXIPnP Driver Status Codes:
          Status    Description
          -------------------------------------------------
          WARNINGS:
          3FFC0101  Instrument does not have ID Query capability.
          3FFC0102  Instrument does not have Reset capability.
          3FFC0103  Instrument does not have Self-Test capability.
          3FFC0104  Instrument does not have Error Query capability.
          3FFC0105  Instrument does not have Revision Query capability.
          
          ERRORS:
          BFFC0001  Parameter 1 out of range, or error trying to set it.
          BFFC0002  Parameter 2 out of range, or error trying to set it.
          BFFC0003  Parameter 3 out of range, or error trying to set it.
          BFFC0004  Parameter 4 out of range, or error trying to set it.
          BFFC0005  Parameter 5 out of range, or error trying to set it.
          BFFC0006  Parameter 6 out of range, or error trying to set it.
          BFFC0007  Parameter 7 out of range, or error trying to set it.
          BFFC0008  Parameter 8 out of range, or error trying to set it.
          BFFC0011  Instrument failed the ID Query.
          BFFC0012  Invalid response from instrument.

      errorMessage

          Variable Type       ViChar[]

          Returns the user-readable message string that corresponds to the
          status code you specify.
          
          You must pass a ViChar array with at least 256 bytes.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_error_query

      ViStatus pi40iv_error_query (ViSession instrumentHandle,
                                   ViPInt32 errorCode,
                                   ViChar _VI_FAR errorMessage[]);

  Purpose

      This function reads an error code and a message from the instrument's
      error queue.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      errorCode

          Variable Type       ViInt32 (passed by reference)

          Returns the error code read from the instrument's error queue.
          
          

      errorMessage

          Variable Type       ViChar[]

          Returns the error message string read from the instrument's error
          message queue.
          
          You must pass a ViChar array with at least 256 bytes.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetAttributeViBoolean

      ViStatus pi40iv_GetAttributeViBoolean (ViSession instrumentHandle,
                                             ViChar _VI_FAR channelName[],
                                             ViAttr attributeID,
                                             ViPBoolean attributeValue);

  Purpose

      This function queries the value of a ViBoolean attribute.
      
      You can use this function to get the values of instrument- specific
      attributes and inherent IVI attributes.  If the attribute represents an
      instrument state, this function performs instrument I/O in the following
      cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to obtain the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Help text is
            shown for each attribute.  Select an attribute by
            double-clicking on it or by selecting it and then pressing
            <ENTER>.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViBoolean
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViBoolean are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViBoolean (passed by reference)

          Returns the current value of the attribute.  Pass the address of a
          ViBoolean variable.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has named constants as valid values, you can view a
            list of the constants by pressing <ENTER> on this control.
            Select a value by double-clicking on it or by selecting it and
            then pressing <ENTER>.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetAttributeViInt32

      ViStatus pi40iv_GetAttributeViInt32 (ViSession instrumentHandle,
                                           ViChar _VI_FAR channelName[],
                                           ViAttr attributeID,
                                           ViPInt32 attributeValue);

  Purpose

      This function queries the value of a ViInt32 attribute.
      
      You can use this function to get the values of instrument- specific
      attributes and inherent IVI attributes.  If the attribute represents an
      instrument state, this function performs instrument I/O in the following
      cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to obtain the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Help text is
            shown for each attribute.  Select an attribute by
            double-clicking on it or by selecting it and then pressing
            <ENTER>.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViInt32 type.
            If you choose to see all IVI attributes, the data types appear
            to the right of the attribute names in the list box.
            Attributes with data types other than ViInt32 are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViInt32 (passed by reference)

          Returns the current value of the attribute.  Pass the address of a
          ViInt32 variable.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has named constants as valid values, you can view a
            list of the constants by pressing <ENTER> on this control.
            Select a value by double-clicking on it or by selecting it and
            then pressing <ENTER>.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetAttributeViReal64

      ViStatus pi40iv_GetAttributeViReal64 (ViSession instrumentHandle,
                                            ViChar _VI_FAR channelName[],
                                            ViAttr attributeID,
                                            ViPReal64 attributeValue);

  Purpose

      This function queries the value of a ViReal64 attribute.
      
      You can use this function to get the values of instrument- specific
      attributes and inherent IVI attributes.  If the attribute represents an
      instrument state, this function performs instrument I/O in the following
      cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to obtain the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Help text is
            shown for each attribute.  Select an attribute by
            double-clicking on it or by selecting it and then pressing
            <ENTER>.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViReal64
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViReal64 are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViReal64 (passed by reference)

          Returns the current value of the attribute.  Pass the address of a
          ViReal64 variable.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has named constants as valid values, you can view a
            list of the constants by pressing <ENTER> on this control.
            Select a value by double-clicking on it or by selecting it and
            then pressing <ENTER>.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetAttributeViSession

      ViStatus pi40iv_GetAttributeViSession (ViSession instrumentHandle,
                                             ViChar _VI_FAR channelName[],
                                             ViAttr attributeID,
                                             ViPSession attributeValue);

  Purpose

      This function queries the value of a ViSession attribute.
      
      You can use this function to get the values of instrument- specific
      attributes and inherent IVI attributes.  If the attribute represents an
      instrument state, this function performs instrument I/O in the following
      cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to obtain the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Help text is
            shown for each attribute.  Select an attribute by
            double-clicking on it or by selecting it and then pressing
            <ENTER>.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViSession
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViSession are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViSession (passed by reference)

          Returns the current value of the attribute.  Pass the address of a
          ViSession variable.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has named constants as valid values, you can view a
            list of the constants by pressing <ENTER> on this control.
            Select a value by double-clicking on it or by selecting it and
            then pressing <ENTER>.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetAttributeViString

      ViStatus pi40iv_GetAttributeViString (ViSession instrumentHandle,
                                            ViChar _VI_FAR channelName[],
                                            ViAttr attributeID,
                                            ViInt32 bufferSize,
                                            ViChar _VI_FAR attributeValue[]);

  Purpose

      This function queries the value of a ViString attribute.
      
      You can use this function to get the values of instrument- specific
      attributes and inherent IVI attributes.  If the attribute represents an
      instrument state, this function performs instrument I/O in the following
      cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid.
      
      You must provide a ViChar array to serve as a buffer for the value.  You
      pass the number of bytes in the buffer as the Buffer Size parameter.  If
      the current value of the attribute, including the terminating NUL byte,
      is larger than the size you indicate in the Buffer Size parameter, the
      function copies Buffer Size - 1 bytes into the buffer, places an ASCII
      NUL byte at the end of the buffer, and returns the buffer size you must
      pass to get the entire value.  For example, if the value is "123456" and
      the Buffer Size is 4, the function places "123" into the buffer and
      returns 7.
      
      If you want to call this function just to get the required buffer size,
      you can pass 0 for the Buffer Size and VI_NULL for the Attribute Value
      buffer.
      
      If you want the function to fill in the buffer regardless of the   number
      of bytes in the value, pass a negative number for the Buffer Size
      parameter.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to obtain the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Help text is
            shown for each attribute.  Select an attribute by
            double-clicking on it or by selecting it and then pressing
            <ENTER>.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViString
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViString are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      bufferSize

          Variable Type       ViInt32

          Pass the number of bytes in the ViChar array you specify for the
          Attribute Value parameter.
          
          If the current value of the attribute, including the terminating NUL
          byte, contains more bytes that you indicate in this parameter, the
          function copies Buffer Size - 1 bytes into the buffer, places an
          ASCII NUL byte at the end of the buffer, and returns the buffer size
          you must pass to get the entire value.  For example, if the value is
          "123456" and the Buffer Size is 4, the function places "123" into the
          buffer and returns 7.
          
          If you pass a negative number, the function copies the value to the
          buffer regardless of the number of bytes in the value.
          
          If you pass 0, you can pass VI_NULL for the Attribute Value buffer
          parameter.
          
          Default Value: 512

      attributeValue

          Variable Type       ViChar[]

          The buffer in which the function returns the current value of the
          attribute.  The buffer must be of type ViChar and have at least as
          many bytes as indicated in the Buffer Size parameter.
          
          If the current value of the attribute, including the terminating NUL
          byte, contains more bytes that you indicate in this parameter, the
          function copies Buffer Size - 1 bytes into the buffer, places an
          ASCII NUL byte at the end of the buffer, and returns the buffer size
          you must pass to get the entire value.  For example, if the value is
          "123456" and the Buffer Size is 4, the function places "123" into the
          buffer and returns 7.
          
          If you specify 0 for the Buffer Size parameter, you can pass VI_NULL
          for this parameter.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has named constants as valid values, you can view a
            list of the constants by pressing <ENTER> on this control.
            Select a value by double-clicking on it or by selecting it and
            then pressing <ENTER>.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          If the current value of the return buffer, including the terminating
          NUL byte, is larger than the size you indicate in the Buffer Size
          parameter, the function copies Buffer Size - 1 bytes into the buffer,
          places an ASCII NUL byte at the end of the buffer, and returns the
          buffer size you must pass to get the entire value.  For example, if
          the value is "123456" and the Buffer Size is 4, the function places
          "123" into the buffer and returns 7.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetChannelName

      ViStatus pi40iv_GetChannelName (ViSession instrumentHandle,
                                      ViInt32 index, ViInt32 size,
                                      ViChar _VI_FAR channelName[]);

  Purpose

      Returns the channel name of a specified channel index

  Parameter List

      instrumentHandle

          Variable Type       ViSession

      index

          Variable Type       ViInt32

      size

          Variable Type       ViInt32

      channelName

          Variable Type       ViChar[]
________________________________________________________________________________

  pi40iv_GetErrorInfo

      ViStatus pi40iv_GetErrorInfo (ViSession instrumentHandle,
                                    ViPStatus primaryError,
                                    ViPStatus secondaryError,
                                    ViChar _VI_FAR errorElaboration[]);

  Purpose

      This function returns the error information associated with an IVI
      session or with the current execution thread.  If you specify a valid IVI
      session for the Instrument Handle parameter, this function retrieves and
      then clears the error information for the session.  If you pass VI_NULL
      for the Instrument Handle parameter, this function retrieves and then
      clears the error information for the current execution thread.
      
      The error information includes a primary error, secondary error, and an
      error elaboration string.  For a particular session, this information is
      the same as the values held in the following attributes:
      
      PI40IV_ATTR_PRIMARY_ERROR
      PI40IV_ATTR_SECONDARY_ERROR
      PI40IV_ATTR_ERROR_ELABORATION
      
      The IVI Library also maintains this error information separately for each
      thread.  This is useful if you do not have a session handle to pass to
      pi40iv_GetErrorInfo or pi40iv_ClearErrorInfo, which
      occurs when a call to pi40iv_init or pi40iv_InitWithOptions fails.
      
      You can call pi40iv_error_message to obtain a text description of the
      primary or secondary error value.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  VI_NULL
          

      primaryError

          Variable Type       ViStatus (passed by reference)

          The primary error code for the session or execution thread.   The
          value is the same as the one held by the attribute
          PI40IV_ATTR_PRIMARY_ERROR.
          
          A value of VI_SUCCESS (0) indicates that no error occurred,  A
          positive value indicates a warning.  A negative value indicates an
          error.
          
          You can call pi40iv_error_message to get a text description of the
          value.
          
          If you are not interested in this value, you can pass VI_NULL.

      secondaryError

          Variable Type       ViStatus (passed by reference)

          The secondary error code for the session or execution thread.  If the
          primary error code is non-zero, the secondary error code can further
          describe the error or warning condition.  The value is the same as
          the one held by the attribute PI40IV_ATTR_SECONDARY_ERROR.
          
          A value of VI_SUCCESS (0) indicates no further description.
          
          You can call pi40iv_error_message to get a text description of the
          value.
          
          If you are not interested in this value, you can pass VI_NULL.
          

      errorElaboration

          Variable Type       ViChar[]

          The error elaboration string for the session or execution thread.  If
          the primary error code is non-zero, the elaboration string can
          further describe the error or warning condition.   The value is the
          same as the one held by the attribute PI40IV_ATTR_ERROR_ELABORATION.
          
          If you are not interested in this value, you can pass VI_NULL.
          Otherwise, you must pass a ViChar array with at least 256 bytes.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetInputBit

      ViStatus pi40iv_GetInputBit (ViSession instrumentHandle,
                                   ViInt32 inputSubNumber, ViInt32 bitNumber,
                                   ViPInt32 state);

  Purpose

      Get state of selected input bit on selected input subunit of Pickering
      card

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      inputSubNumber

          Variable Type       ViInt32

          sub-unit of target to read (unity-based)

      bitNumber

          Variable Type       ViInt32

          input bit number (unity-based)

      state

          Variable Type       ViInt32 (passed by reference)

          Logical state of input bit

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetInputSizeBits

      ViStatus pi40iv_GetInputSizeBits (ViSession instrumentHandle,
                                        ViInt32 inputSubNumber,
                                        ViPInt32 size);

  Purpose

      Get number of bits in selected input subunit of Pickering card

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      inputSubNumber

          Variable Type       ViInt32

          sub-unit of target to read (unity-based)

      size

          Variable Type       ViInt32 (passed by reference)

          Number of bits in input subunit

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetInputSizeDwords

      ViStatus pi40iv_GetInputSizeDwords (ViSession instrumentHandle,
                                          ViInt32 inputSubNumber,
                                          ViPInt32 size);

  Purpose

      Get number of DWORDs that need to be alocated to work with array
      functions on this subunit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      inputSubNumber

          Variable Type       ViInt32

          sub-unit of target (unity-based)

      size

          Variable Type       ViInt32 (passed by reference)

          Number of DWORDs

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetInputSub

      ViStatus pi40iv_GetInputSub (ViSession instrumentHandle,
                                   ViInt32 inputSubNumber,
                                   ViInt32 _VI_FAR data[]);

  Purpose

      Get the state of an input sub-unit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      inputSubNumber

          Variable Type       ViInt32

          sub-unit of target to read (unity-based)

      data

          Variable Type       ViInt32[]

          pointer to ViInt32 array to accept result

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetMatrixSplit

      ViStatus pi40iv_GetMatrixSplit (ViSession instrumentHandle,
                                      ViPInt32 attributeValue);

  Purpose

      Get value of Matrix Split attribute (used with special matrix card
      supporting this feature)

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      attributeValue

          Variable Type       ViInt32 (passed by reference)

          Value of Matrix Split attribute

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetNextCoercionRecord

      ViStatus pi40iv_GetNextCoercionRecord (ViSession instrumentHandle,
                                             ViInt32 bufferSize,
                                             ViChar _VI_FAR coercionRecord[]);

  Purpose

      This function returns the coercion information associated with the IVI
      session.  This function retrieves and clears the oldest instance in which
      the instrument driver coerced a value you specified to another value.
      
      If you set the PI40IV_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the
      instrument driver keeps a list of all coercions it makes on ViInt32 or
      ViReal64 values you pass to instrument driver functions.  You use this
      function to retrieve information from that list.
      
      If the next coercion record string, including the terminating NUL byte,
      contains more bytes than you indicate in this parameter, the function
      copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at
      the end of the buffer, and returns the buffer size you must pass to get
      the entire value.  For example, if the value is "123456" and the Buffer
      Size is 4, the function places "123" into the buffer and returns 7.
      
      If you pass a negative number, the function copies the value to the
      buffer regardless of the number of bytes in the value.
      
      If you pass 0, you can pass VI_NULL for the Coercion Record buffer
      parameter.
      
      The function returns an empty string in the Coercion Record parameter if
      no coercion records remain for the session.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init function.
          The handle identifies a particular instrument session.
          
          Default Value:  None

      bufferSize

          Variable Type       ViInt32

          Pass the number of bytes in the ViChar array you specify for the
          Coercion Record parameter.
          
          If the next coercion record string, including the terminating NUL
          byte, contains more bytes than you indicate in this parameter, the
          function copies Buffer Size - 1 bytes into the buffer, places an
          ASCII NUL byte at the end of the buffer, and returns the buffer size
          you must pass to get the entire value.  For example, if the value is
          "123456" and the Buffer Size is 4, the function places "123" into the
          buffer and returns 7.
          
          If you pass a negative number, the function copies the value to the
          buffer regardless of the number of bytes in the value.
          
          If you pass 0, you can pass VI_NULL for the Coercion Record buffer
          parameter.
          
          Default Value:  None
          
          

      coercionRecord

          Variable Type       ViChar[]

          Returns the next coercion record for the IVI session.  If there are
          no coercion records, the function returns an empty string.
          
          The buffer must contain at least as many elements as the value you
          specify with the Buffer Size parameter.  If the next coercion record
          string, including the terminating NUL byte, contains more bytes than
          you indicate with the Buffer Size parameter, the function copies
          Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at
          the end of the buffer, and returns the buffer size you must pass to
          get the entire value.  For example, if the value is "123456" and the
          Buffer Size is 4, the function places "123" into the buffer and
          returns 7.
          
          This parameter returns an empty string if no coercion records remain
          for the session.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          If the current value of the return buffer, including the terminating
          NUL byte, is larger than the size you indicate in the Buffer Size
          parameter, the function copies Buffer Size - 1 bytes into the buffer,
          places an ASCII NUL byte at the end of the buffer, and returns the
          buffer size you must pass to get the entire value.  For example, if
          the value is "123456" and the Buffer Size is 4, the function places
          "123" into the buffer and returns 7.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_GetNumberInputSubs

      ViStatus pi40iv_GetNumberInputSubs (ViSession instrumentHandle,
                                          ViPInt32 number_ofInputSubs);

  Purpose

      Get number of input subunits on Pickering card

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      number_ofInputSubs

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive input sub-unit count

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetNumberOutputSubs

      ViStatus pi40iv_GetNumberOutputSubs (ViSession instrumentHandle,
                                           ViPInt32 number_ofOutSubs);

  Purpose

      Get number of output subunits on Pickering card

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      number_ofOutSubs

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive output sub-unit count

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetOutputBit

      ViStatus pi40iv_GetOutputBit (ViSession instrumentHandle,
                                    ViInt32 outputSubNumber,
                                    ViInt32 bitNumber, ViPInt32 state);

  Purpose

      Get the state of an individual output bit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      bitNumber

          Variable Type       ViInt32

          output bit number (unity-based)

      state

          Variable Type       ViInt32 (passed by reference)

          pointer to ViInt32 variable to accept result

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetOutputSizeBits

      ViStatus pi40iv_GetOutputSizeBits (ViSession instrumentHandle,
                                         ViInt32 outputSubNumber,
                                         ViPInt32 size);

  Purpose

      Get number of bits in selected output subunit of Pickering card

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to read (unity-based)

      size

          Variable Type       ViInt32 (passed by reference)

          Number of bits in output subunit

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetOutputSizeDwords

      ViStatus pi40iv_GetOutputSizeDwords (ViSession instrumentHandle,
                                           unsigned int outputSubNumber,
                                           unsigned int *size);

  Purpose

      Get number of DWORDs that need to be alocated to work with array
      functions on this subunit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       unsigned int

          sub-unit of target (unity-based)

      size

          Variable Type       unsigned int (passed by reference)

          Number of DWORDs

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetOutputSub

      ViStatus pi40iv_GetOutputSub (ViSession instrumentHandle,
                                    ViInt32 outputSubNumber,
                                    ViInt32 _VI_FAR data[]);

  Purpose

      Get the state of an output sub-unit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      data

          Variable Type       ViInt32[]

          pointer to ViInt32 array to accept result

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetPath

      ViStatus pi40iv_GetPath (ViSession instrumentHandle,
                               ViChar _VI_FAR channel1[],
                               ViChar _VI_FAR channel2[], ViInt32 bufferSize,
                               ViChar _VI_FAR path[]);

  Purpose

      In some cases there is more than one possible path between two channels.
      The driver or the instrument selects the path when you connect two
      channels with the pi40iv_Connect function. Thus, you cannot guarantee
      that every call to the pi40iv_Connect function establishes exactly the
      same path when you pass the same channels. This function returns a string
      that uniquely identifies the path you create with the pi40iv_Connect
      function. You can pass this string to the pi40iv_SetPath function to
      establish the exact same path in the future.
      
      Note:
      
      (1) This function returns only those paths that you explicitly
          create by calling pi40iv_Connect and pi40iv_SetPath
          functions. For example, if you connect channels CH1 and CH3,
          and then channels CH2 and CH3, the explicit path between
          channels CH1 and Ch2 does not exist and this function
          returns an error.

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None

      channel1

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to obtain a path. Pass the other channel name as
          the Channel 2 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

      channel2

          Variable Type       ViChar[]

          You identify a path with two channels. Pass one of the channel names
          for which you want to obtain a path. Pass the other channel name as
          the Channel 1 parameter.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""

      bufferSize

          Variable Type       ViInt32

          Pass the number of bytes in the ViChar array you specify for the Path
          List parameter.
          
          If the current value of the attribute, including the terminating NUL
          byte, contains more bytes that you indicate in this parameter, the
          function copies Buffer Size - 1 bytes into the buffer, places an
          ASCII NUL byte at the end of the buffer, and returns the buffer size
          you must pass to get the entire value.  For example, if the value is
          "R1->C1" and the Buffer Size is 4, the function places "R1-" into the
          buffer and returns 7.
          
          If you pass 0, you can pass VI_NULL for the Path parameter. This
          enables you to find out the path size and to allocate the buffer of
          the appropriate size before calling this function again.

      path

          Variable Type       ViChar[]

          The comma-separated path between channels you specify in the Channel
          1 and Channel 2 parameters.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          If the current value of the return buffer, including the terminating
          NUL byte, is larger than the size you indicate in the Buffer Size
          parameter, the function copies Buffer Size - 1 bytes into the buffer,
          places an ASCII NUL byte at the end of the buffer, and returns the
          buffer size you must pass to get the entire value.  For example, if
          the value is "123456" and the Buffer Size is 4, the function places
          "123" into the buffer and returns 7.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_GetResistance

      ViStatus pi40iv_GetResistance (ViSession instrumentHandle,
                                     ViInt32 outputSubNumber,
                                     ViPReal64 resistance);

  Purpose

      obtain the set resistance value
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      resistance

          Variable Type       ViReal64 (passed by reference)

          pointer to variable to receive the resistance value

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_init

      ViStatus pi40iv_init (ViRsrc resourceName, ViBoolean IDQuery,
                            ViBoolean resetDevice,
                            ViPSession instrumentHandle);

  Purpose

      This function performs the following initialization actions:
      
      - Creates a new IVI instrument driver session.
      
      - Opens a session to the specified device using the interface and address
      you specify for the Resource Name parameter.
      
      - If the ID Query parameter is set to VI_TRUE, this function queries the
      instrument ID and checks that it is valid for this instrument driver.
      
      - If the Reset parameter is set to VI_TRUE, this function resets the
      instrument to a known state.
      
      - Sends initialization commands to set the instrument to the state
      necessary for the operation of the instrument driver.
      
      - Returns a ViSession handle that you use to identify the instrument in
      all subsequent instrument driver function calls.
      
      Note:  This function creates a new session each time you invoke it.
      Although you can open more than one IVI session for the same resource, it
      is best not to do so.  You can use the same session in multiple program
      threads.  You can use the pi40iv_LockSession and pi40iv_UnlockSession
      functions to protect sections of code that require exclusive access to
      the resource.

  Parameter List

      resourceName

          Variable Type       ViRsrc

          Pass the resource name of the device to initialize.
          
          You can also pass the name of a virtual instrument or logical name
          that you configure with the IVI Configuration utility.  The virtual
          instrument identifies a specific device and specifies the initial
          settings for the session.  A logical Name identifies a particular
          virtual instrument.
          
          Refer to the following table below for the exact grammar to use for
          this parameter.  Optional fields are shown in square brackets ([]).
          
          Syntax
          ------------------------------------------------------
          GPIB[board]::<primary address>[::secondary address]::INSTR
          VXI[board]::<logical address>::INSTR
          GPIB-VXI[board]::<logical address>::INSTR
          ASRL<port>::INSTR
          <LogicalName>
          [VInstr->]<VirtualInstrument>
          
          If you do not specify a value for an optional field, the following
          values are used:
          
          Optional Field - Value
          ------------------------------------------------------
          board - 0
          secondary address - none (31)
          
          The following table contains example valid values for this parameter.
          
          "Valid Value" - Description
          ------------------------------------------------------
          "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
                              secondary address
          "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
                                 secondary address 5
          "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
                                  secondary address 5
          "VXI::64::INSTR" - VXI board 0, logical address 64
          "VXI1::64::INSTR" - VXI board 1, logical address 64
          "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64
          "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64
          "ASRL2::INSTR" - COM port 2
          "SampleInstr" - Logical name "SampleInstr"
          "VInstr->xyz432" - Virtual Instrument "xyz432"
          "xyz432" - Logical Name or Virtual Instrument "xyz432"
          
          /*=CHANGE:===================================================*
          
          Modify the following default value so that it reflects the default
          address for your instrument.  You must make the corresponding change
          to the Default Value entry for the control.
          
           *================================================END=CHANGE=*/
          Default Value:  "VXI::14::INSTR"
          
          Note: You specify the resource name with the "VInstr->" if you have
          the logical name that is the same as the virtual instrument name and
          you want to explicitly use the virtual instrument name. Otherwise,
          the driver uses the logical name.

      IDQuery

          Variable Type       ViBoolean

          Specify whether you want the instrument driver to perform an ID
          Query.
          
          Valid Range:
          VI_TRUE  (1) - Perform ID Query (Default Value)
          VI_FALSE (0) - Skip ID Query
          
          When you set this parameter to VI_TRUE, the driver verifies that the
          instrument you initialize is a type that this driver supports.
          
          Circumstances can arise where it is undesirable to send an ID Query
          command string to the instrument.  When you set this parameter to
          VI_FALSE, the function initializes the instrument without performing
          an ID Query.

      resetDevice

          Variable Type       ViBoolean

          Specify whether you want the to reset the instrument during the
          initialization procedure.
          
          Valid Range:
          VI_TRUE  (1) - Reset Device (Default Value)
          VI_FALSE (0) - Don't Reset

      instrumentHandle

          Variable Type       ViSession (passed by reference)

          Returns a ViSession handle that you use to identify the instrument in
          all subsequent instrument driver function calls.
          
          Notes:
          
          (1) This function creates a new session each time you invoke it.
          This is useful if you have multiple physical instances of the same
          type of instrument.
          
          (2) Avoid creating multiple concurrent sessions to the same physical
          instrument.  Although you can create more than one IVI session for
          the same resource, it is best not to do so.  A better approach is to
          use the same IVI session in multiple execution threads.  You can use
          functions pi40iv_LockSession and pi40iv_UnlockSession to protect
          sections of code that require exclusive access to the resource.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_InitWithOptions

      ViStatus pi40iv_InitWithOptions (ViRsrc resourceName, ViBoolean IDQuery,
                                       ViBoolean resetDevice,
                                       ViString optionString,
                                       ViPSession instrumentHandle);

  Purpose

      This function performs the following initialization actions:
      
      - Creates a new IVI instrument driver and optionally sets the initial
      state of the following session attributes:
      
          PI40IV_ATTR_RANGE_CHECK
          PI40IV_ATTR_QUERY_INSTR_STATUS
          PI40IV_ATTR_CACHE
          PI40IV_ATTR_SIMULATE
          PI40IV_ATTR_RECORD_COERCIONS
      
      - Opens a session to the specified device using the interface and address
      you specify for the Resource Name parameter.
      
      - If the ID Query parameter is set to VI_TRUE, this function queries the
      instrument ID and checks that it is valid for this instrument driver.
      
      - If the Reset parameter is set to VI_TRUE, this function resets the
      instrument to a known state.
      
      - Sends initialization commands to set the instrument to the state
      necessary for the operation of the instrument driver.
      
      - Returns a ViSession handle that you use to identify the instrument in
      all subsequent instrument driver function calls.
      
      Note:  This function creates a new session each time you invoke it.
      Although you can open more than one IVI session for the same resource, it
      is best not to do so.  You can use the same session in multiple program
      threads.  You can use the pi40iv_LockSession and pi40iv_UnlockSession
      functions to protect sections of code that require exclusive access to
      the resource.

  Parameter List

      resourceName

          Variable Type       ViRsrc

          Pass the resource name of the device to initialize.
          
          You can also pass the name of a virtual instrument or logical name
          that you configure with the IVI Configuration utility.  The virtual
          instrument identifies a specific device and specifies the initial
          settings for the session.  A logical Name identifies a particular
          virtual instrument.
          
          Refer to the following table below for the exact grammar to use for
          this parameter.  Optional fields are shown in square brackets ([]).
          
          Syntax
          ------------------------------------------------------
          GPIB[board]::<primary address>[::secondary address]::INSTR
          VXI[board]::<logical address>::INSTR
          GPIB-VXI[board]::<logical address>::INSTR
          ASRL<port>::INSTR
          <LogicalName>
          [VInstr->]<VirtualInstrument>
          
          If you do not specify a value for an optional field, the following
          values are used:
          
          Optional Field - Value
          ------------------------------------------------------
          board - 0
          secondary address - none (31)
          
          The following table contains example valid values for this parameter.
          
          "Valid Value" - Description
          ------------------------------------------------------
          "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
                              secondary address
          "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
                                 secondary address 5
          "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
                                  secondary address 5
          "VXI::64::INSTR" - VXI board 0, logical address 64
          "VXI1::64::INSTR" - VXI board 1, logical address 64
          "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64
          "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64
          "ASRL2::INSTR" - COM port 2
          "SampleInstr" - Logical name "SampleInstr"
          "VInstr->xyz432" - Virtual Instrument "xyz432"
          "xyz432" - Logical Name or Virtual Instrument "xyz432"
          
          /*=CHANGE:===================================================*
          
          Modify the following default value so that it reflects the default
          address for your instrument.  You must make the corresponding change
          to the Default Value entry for the control.
          
           *================================================END=CHANGE=*/
          Default Value:  "VXI::14::INSTR"
          
          Note: You specify the resource name with the "VInstr->" if you have
          the logical name that is the same as the virtual instrument name and
          you want to explicitly use the virtual instrument name. Otherwise,
          the driver uses the logical name.

      IDQuery

          Variable Type       ViBoolean

          Specify whether you want the instrument driver to perform an ID
          Query.
          
          Valid Range:
          VI_TRUE  (1) - Perform ID Query (Default Value)
          VI_FALSE (0) - Skip ID Query
          
          When you set this parameter to VI_TRUE, the driver verifies that the
          instrument you initialize is a type that this driver supports.
          
          Circumstances can arise where it is undesirable to send an ID Query
          command string to the instrument.  When you set this parameter to
          VI_FALSE, the function initializes the instrument without performing
          an ID Query.

      resetDevice

          Variable Type       ViBoolean

          Specify whether you want the to reset the instrument during the
          initialization procedure.
          
          Valid Range:
          VI_TRUE  (1) - Reset Device (Default Value)
          VI_FALSE (0) - Don't Reset

      optionString

          Variable Type       ViString

          You can use this control to set the initial value of certain
          attributes for the session.  The following table lists the attributes
          and the name you use in this parameter to identify the attribute.
          
          Name              Attribute Defined Constant
          --------------------------------------------
          RangeCheck        PI40IV_ATTR_RANGE_CHECK
          QueryInstrStatus  PI40IV_ATTR_QUERY_INSTR_STATUS
          Cache             PI40IV_ATTR_CACHE
          Simulate          PI40IV_ATTR_SIMULATE
          RecordCoercions   PI40IV_ATTR_RECORD_COERCIONS
          
          The format of this string is, "AttributeName=Value" where
          AttributeName is the name of the attribute and Value is the value to
          which the attribute will be set.  To set multiple attributes,
          separate their assignments with a comma.
          
          If you pass NULL or an empty string for this parameter and a VISA
          resource descriptor for the Resource Name parameter, the session uses
          the default values for the attributes. The default values for the
          attributes are shown below:
          
              Attribute Name     Default Value
              ----------------   -------------
              RangeCheck         VI_TRUE
              QueryInstrStatus   VI_TRUE
              Cache              VI_TRUE
              Simulate           VI_FALSE
              RecordCoercions    VI_FALSE
          
          If you pass NULL or an empty string for this parameter and a virtual
          instrument or logical name for the Resource Name parameter, the
          session uses the values that you configure for virtual instrument or
          logical name with the IVI Configuration utility.
          
          You can override the values of the attributes by assigning a value
          explicitly in a string you pass for this parameter.  You do not have
          to specify all of the attributes and may leave any of them out.  If
          you do not specify one of the attributes, its default value or the
          value that you configure with the IVI Configuration utility will be
          used.
          
          The following are the valid values for ViBoolean attributes:
              True:     1, TRUE, or VI_TRUE
              False:    0, False, or VI_FALSE
          
          Default Value:
          "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1"

      instrumentHandle

          Variable Type       ViSession (passed by reference)

          Returns a ViSession handle that you use to identify the instrument in
          all subsequent instrument driver function calls.
          
          Notes:
          
          (1) This function creates a new session each time you invoke it.
          This is useful if you have multiple physical instances of the same
          type of instrument.
          
          (2) Avoid creating multiple concurrent sessions to the same physical
          instrument.  Although you can create more than one IVI session for
          the same resource, it is best not to do so.  A better approach is to
          use the same IVI session in multiple execution threads.  You can use
          functions pi40iv_LockSession and pi40iv_UnlockSession to protect
          sections of code that require exclusive access to the resource.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_IsDebounced

      ViStatus pi40iv_IsDebounced (ViSession instrumentHandle,
                                   ViPBoolean isDebounced);

  Purpose

      This function returns the state of the switch module. It indicates if all
      the paths that you created have settled.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      isDebounced

          Variable Type       ViBoolean (passed by reference)

          Indicates the state of the switch module. The driver returns the
          value of PI40IV_ATTR_IS_DEBOUNCED attribute.
          
          The value VI_TRUE indicates that all the paths that you created have
          settled.
          
          The value VI_FALSE indicates that all the paths that you created have
          not settled.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_LockSession

      ViStatus pi40iv_LockSession (ViSession instrumentHandle,
                                   ViPBoolean callerHasLock);

  Purpose

      This function obtains a multithread lock on the instrument session.
      Before it does so, it waits until all other execution threads have
      released their locks on the instrument session.
      
      Other threads might have obtained a lock on this session in the following
      ways:
      
      - The user's application called pi40iv_LockSession.
      
      - A call to the instrument driver locked the session.
      
      - A call to the IVI engine locked the session.
      
      After your call to pi40iv_LockSession returns successfully, no other
      threads can access the instrument session until you call
      pi40iv_UnlockSession.
      
      Use pi40iv_LockSession and pi40iv_UnlockSession around a sequence of
      calls to instrument driver functions if you require that the instrument
      retain its settings through the end of the sequence.
      
      You can safely make nested calls to pi40iv_LockSession within the same
      thread.  To completely unlock the session, you must balance each call to
      pi40iv_LockSession with a call to pi40iv_UnlockSession.  If, however, you
      use the Caller Has Lock parameter in all calls to pi40iv_LockSession and
      pi40iv_UnlockSession within a function, the IVI Library locks the session
      only once within the function regardless of the number of calls you make
      to pi40iv_LockSession.  This allows you to call pi40iv_UnlockSession just
      once at the end of the function.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      callerHasLock

          Variable Type       ViBoolean (passed by reference)

          This parameter serves as a convenience.  If you do not want to use
          this parameter, pass VI_NULL.
          
          Use this parameter in complex functions to keep track of whether you
          obtain a lock and therefore need to unlock the session.  Pass the
          address of a local ViBoolean variable.  In the declaration of the
          local variable, initialize it to VI_FALSE.  Pass the address of the
          same local variable to any other calls you make to pi40iv_LockSession
          or pi40iv_UnlockSession in the same function.
          
          The parameter is an input/output parameter.  pi40iv_LockSession and
          pi40iv_UnlockSession each inspect the current value and take the
          following actions:
          
          - If the value is VI_TRUE, pi40iv_LockSession does not lock the
          session again.  If the value is VI_FALSE, pi40iv_LockSession obtains
          the lock and sets the value of the parameter to VI_TRUE.
          
          - If the value is VI_FALSE, pi40iv_UnlockSession does not attempt to
          unlock the session.  If the value is VI_TRUE, pi40iv_UnlockSession
          releases the lock and sets the value of the parameter to VI_FALSE.
          
          Thus, you can, call pi40iv_UnlockSession at the end of your function
          without worrying about whether you actually have the lock.
          
          Example:
          
          ViStatus TestFunc (ViSession vi, ViInt32 flags)
          {
              ViStatus error = VI_SUCCESS;
              ViBoolean haveLock = VI_FALSE;
          
              if (flags & BIT_1)
                  {
                  viCheckErr( pi40iv_LockSession(vi, &haveLock));
                  viCheckErr( TakeAction1(vi));
                  if (flags & BIT_2)
                      {
                      viCheckErr( pi40iv_UnlockSession(vi, &haveLock));
                      viCheckErr( TakeAction2(vi));
                      viCheckErr( pi40iv_LockSession(vi, &haveLock);
                      }
                  if (flags & BIT_3)
                      viCheckErr( TakeAction3(vi));
                  }
          
          Error:
              /*
                 At this point, you cannot really be sure that
                 you have the lock.  Fortunately, the haveLock
                 variable takes care of that for you.
              */
              pi40iv_UnlockSession(vi, &haveLock);
              return error;
          }

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_ReadCal

      ViStatus pi40iv_ReadCal (ViSession instrumentHandle,
                               ViInt32 outputSubNumber, ViInt32 index,
                               ViPInt32 data);

  Purpose

      read a calibration value from EEPROM

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      index

          Variable Type       ViInt32

          calibration value index number (unity-based)
          

      data

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive result

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_reset

      ViStatus pi40iv_reset (ViSession instrumentHandle);

  Purpose

      This function resets the instrument to a known state and sends
      initialization commands to the instrument.  The initialization commands
      set instrument settings such as Headers Off, Short Command form, and Data
      Transfer Binary to the state necessary for the operation of the
      instrument driver.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_revision_query

      ViStatus pi40iv_revision_query (ViSession instrumentHandle,
                                      ViChar _VI_FAR instrumentDriverRevision[],
                                      ViChar _VI_FAR firmwareRevision[]);

  Purpose

      This function returns the revision numbers of the instrument driver and
      instrument firmware.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      instrumentDriverRevision

          Variable Type       ViChar[]

          Returns the instrument driver software revision numbers in the form
          of a string.
          
          You must pass a ViChar array with at least 256 bytes.

      firmwareRevision

          Variable Type       ViChar[]

          Returns the instrument firmware revision numbers in the form of a
          string.
          
          You must pass a ViChar array with at least 256 bytes.
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_self_test

      ViStatus pi40iv_self_test (ViSession instrumentHandle,
                                 ViPInt16 selfTestResult,
                                 ViChar _VI_FAR selfTestMessage[]);

  Purpose

      This function runs the instrument's self test routine and returns the
      test result(s).
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      selfTestResult

          Variable Type       ViInt16 (passed by reference)

          This control contains the value returned from the instrument self
          test.  Zero means success.  For any other code, see the device's
          operator's manual.
          
          Self-Test Code    Description
          ---------------------------------------
             0              Passed self test
             1              Self test failed
          
          

      selfTestMessage

          Variable Type       ViChar[]

          Returns the self-test response string from the instrument. See the
          device's operation manual for an explanation of the string's
          contents.
          
          You must pass a ViChar array with at least 256 bytes.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetAttributeViBoolean

      ViStatus pi40iv_SetAttributeViBoolean (ViSession instrumentHandle,
                                             ViChar _VI_FAR channelName[],
                                             ViAttr attributeID,
                                             ViBoolean attributeValue);

  Purpose

      This function sets the value of a ViBoolean attribute.
      
      This is a low-level function that you can use to set the values of
      instrument-specific attributes and inherent IVI attributes.  If the
      attribute represents an instrument state, this function performs
      instrument I/O in the following cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid or
      is different than the value you specify.
      
      This instrument driver contains high-level functions that set most of the
      instrument attributes.  It is best to use the high-level driver functions
      as much as possible.  They handle order dependencies and multithread
      locking for you.  In addition, they perform status checking only after
      setting all of the attributes.  In contrast, when you set multiple
      attributes using the SetAttribute functions, the functions check the
      instrument status after each call.
      
      Also, when state caching is enabled, the high-level functions that
      configure multiple attributes perform instrument I/O only for the
      attributes whose value you change.  Thus, you can safely call the
      high-level functions without the penalty of redundant instrument I/O.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to set the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViBoolean
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViBoolean are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViBoolean

          Pass the value to which you want to set the attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetAttributeViInt32

      ViStatus pi40iv_SetAttributeViInt32 (ViSession instrumentHandle,
                                           ViChar _VI_FAR channelName[],
                                           ViAttr attributeID,
                                           ViInt32 attributeValue);

  Purpose

      This function sets the value of a ViInt32 attribute.
      
      This is a low-level function that you can use to set the values of
      instrument-specific attributes and inherent IVI attributes.  If the
      attribute represents an instrument state, this function performs
      instrument I/O in the following cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid or
      is different than the value you specify.
      
      This instrument driver contains high-level functions that set most of the
      instrument attributes.  It is best to use the high-level driver functions
      as much as possible.  They handle order dependencies and multithread
      locking for you.  In addition, they perform status checking only after
      setting all of the attributes.  In contrast, when you set multiple
      attributes using the SetAttribute functions, the functions check the
      instrument status after each call.
      
      Also, when state caching is enabled, the high-level functions that
      configure multiple attributes perform instrument I/O only for the
      attributes whose value you change.  Thus, you can safely call the
      high-level functions without the penalty of redundant instrument I/O.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to set the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViInt32 type.
            If you choose to see all IVI attributes, the data types appear
            to the right of the attribute names in the list box.
            Attributes with data types other than ViInt32 are dim.  If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViInt32

          Pass the value to which you want to set the attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetAttributeViReal64

      ViStatus pi40iv_SetAttributeViReal64 (ViSession instrumentHandle,
                                            ViChar _VI_FAR channelName[],
                                            ViAttr attributeID,
                                            ViReal64 attributeValue);

  Purpose

      This function sets the value of a ViReal64 attribute.
      
      This is a low-level function that you can use to set the values of
      instrument-specific attributes and inherent IVI attributes.  If the
      attribute represents an instrument state, this function performs
      instrument I/O in the following cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid or
      is different than the value you specify.
      
      This instrument driver contains high-level functions that set most of the
      instrument attributes.  It is best to use the high-level driver functions
      as much as possible.  They handle order dependencies and multithread
      locking for you.  In addition, they perform status checking only after
      setting all of the attributes.  In contrast, when you set multiple
      attributes using the SetAttribute functions, the functions check the
      instrument status after each call.
      
      Also, when state caching is enabled, the high-level functions that
      configure multiple attributes perform instrument I/O only for the
      attributes whose value you change.  Thus, you can safely call the
      high-level functions without the penalty of redundant instrument I/O.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to set the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViReal64
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViReal64 are dim.  If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViReal64

          Pass the value to which you want to set the attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetAttributeViSession

      ViStatus pi40iv_SetAttributeViSession (ViSession instrumentHandle,
                                             ViChar _VI_FAR channelName[],
                                             ViAttr attributeID,
                                             ViSession attributeValue);

  Purpose

      This function sets the value of a ViSession attribute.
      
      This is a low-level function that you can use to set the values of
      instrument-specific attributes and inherent IVI attributes.  If the
      attribute represents an instrument state, this function performs
      instrument I/O in the following cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid or
      is different than the value you specify.
      
      This instrument driver contains high-level functions that set most of the
      instrument attributes.  It is best to use the high-level driver functions
      as much as possible.  They handle order dependencies and multithread
      locking for you.  In addition, they perform status checking only after
      setting all of the attributes.  In contrast, when you set multiple
      attributes using the SetAttribute functions, the functions check the
      instrument status after each call.
      
      Also, when state caching is enabled, the high-level functions that
      configure multiple attributes perform instrument I/O only for the
      attributes whose value you change.  Thus, you can safely call the
      high-level functions without the penalty of redundant instrument I/O.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to set the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViSession
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViSession are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViSession

          Pass the value to which you want to set the attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetAttributeViString

      ViStatus pi40iv_SetAttributeViString (ViSession instrumentHandle,
                                            ViChar _VI_FAR channelName[],
                                            ViAttr attributeID,
                                            ViChar _VI_FAR attributeValue[]);

  Purpose

      This function sets the value of a ViString attribute.
      
      This is a low-level function that you can use to set the values of
      instrument-specific attributes and inherent IVI attributes.  If the
      attribute represents an instrument state, this function performs
      instrument I/O in the following cases:
      
      - State caching is disabled for the entire session or for the particular
      attribute.
      
      - State caching is enabled and the currently cached value is invalid or
      is different than the value you specify.
      
      This instrument driver contains high-level functions that set most of the
      instrument attributes.  It is best to use the high-level driver functions
      as much as possible.  They handle order dependencies and multithread
      locking for you.  In addition, they perform status checking only after
      setting all of the attributes.  In contrast, when you set multiple
      attributes using the SetAttribute functions, the functions check the
      instrument status after each call.
      
      Also, when state caching is enabled, the high-level functions that
      configure multiple attributes perform instrument I/O only for the
      attributes whose value you change.  Thus, you can safely call the
      high-level functions without the penalty of redundant instrument I/O.
      
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      channelName

          Variable Type       ViChar[]

          If the attribute is channel-based, this parameter specifies the name
          of the channel on which to set the value of the attribute. If the
          attribute is not channel-based, then pass VI_NULL or an empty string.
          
          Valid Channel Names:  x1,x2,y1,y2
          
          Default Value:  ""
          

      attributeID

          Variable Type       ViAttr

          Pass the ID of an attribute.
          
          From the function panel window, you can use this control as follows.
          
          - Click on the control or press <ENTER>, <spacebar>, or
            <ctrl-down arrow>, to display a dialog box containing a
            hierarchical list of the available attributes.  Attributes
            whose value cannot be set are dim.  Help text is shown for
            each attribute.  Select an attribute by double-clicking on it
            or by selecting it and then pressing <ENTER>.
          
            Read-only attributes appear dim in the list box.  If you
            select a read-only attribute, an error message appears.
          
            A ring control at the top of the dialog box allows you to see
            all IVI attributes or only the attributes of the ViString
            type.  If you choose to see all IVI attributes, the data types
            appear to the right of the attribute names in the list box.
            Attributes with data types other than ViString are dim. If
            you select an attribute data type that is dim, LabWindows/CVI
            transfers you to the function panel for the corresponding
            function that is consistent with the data type.
          
          - If you want to enter a variable name, press <CTRL-T> to change
            this ring control to a manual input box.
          
          - If the attribute in this ring control has named constants as
            valid values, you can view the constants by moving to the
            Attribute Value control and pressing <ENTER>.
          

      attributeValue

          Variable Type       ViChar[]

          Pass the value to which you want to set the attribute.
          
          From the function panel window, you can use this control as follows.
          
          - If the attribute currently showing in the Attribute ID ring
            control has constants as valid values, you can view a list of
            the constants by pressing <ENTER> on this control.  Select a
            value by double-clicking on it or by selecting it and then
            pressing <ENTER>.
          
            Note:  Some of the values might not be valid depending on the
            current settings of the instrument session.
          
          Default Value: none

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_SetOutputBit

      ViStatus pi40iv_SetOutputBit (ViSession instrumentHandle,
                                    ViInt32 outputSubNumber,
                                    ViInt32 bitNumber, ViInt32 state);

  Purpose

      Operate a single output bit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      bitNumber

          Variable Type       ViInt32

          output bit number (unity-based)

      state

          Variable Type       ViInt32

          TRUE (for ON) or FALSE (for OFF)

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_SetOutputSub

      ViStatus pi40iv_SetOutputSub (ViSession instrumentHandle,
                                    unsigned int outputSubNumber,
                                    unsigned long data[]);

  Purpose

      Write data to an output sub-unit

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       unsigned int

          sub-unit of target to access (unity-based)

      data

          Variable Type       unsigned long []

          Binary data representing states of all bits in subunit to set

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_SetPath

      ViStatus pi40iv_SetPath (ViSession instrumentHandle,
                               ViChar _VI_FAR pathList[]);

  Purpose

      This function connects two channels by establishing the exact path you
      specify with the pathList parameter.
      
      /*=CHANGE:====================================================*/
          Add comments here about possible connections for your instrument.
      /*==================================================END=CHANGE*/

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None

      pathList

          Variable Type       ViChar[]

          Pass the path list for the path you previously created that you want
          the switch module to establish. You obtain the path list for a path
          you previously created with the pi40iv_GetPath function.
          
          Example: The path from Ch1 to Ch3 over Conf1 is:
          
          "Ch1->Conf1,Conf1->Ch3"

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_SetResistance

      ViStatus pi40iv_SetResistance (ViSession instrumentHandle,
                                     ViInt32 outputSubNumber,
                                     ViReal64 resistance);

  Purpose

      set resistance as close as possible to the given value
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      resistance

          Variable Type       ViReal64

          the resistance to set
          
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_SubInfo

      ViStatus pi40iv_SubInfo (ViSession instrumentHandle, ViInt32 subUnit,
                               ViInt16 outNotIn, ViPInt32 type, ViPInt32 rows,
                               ViPInt32 columns);

  Purpose

      Get Pickering card sub-unit information (numeric format)

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      subUnit

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      outNotIn

          Variable Type       ViInt16

          1 for output subunit
          0 for input subunit

      type

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive type code result

      rows

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive row dimension result

      columns

          Variable Type       ViInt32 (passed by reference)

          pointer to variable to receive column dimension result

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_UnlockSession

      ViStatus pi40iv_UnlockSession (ViSession instrumentHandle,
                                     ViPBoolean callerHasLock);

  Purpose

      This function releases a lock that you acquired on an instrument session
      using pi40iv_LockSession.  Refer to pi40iv_LockSession for additional
      information on session locks.
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      callerHasLock

          Variable Type       ViBoolean (passed by reference)

          This parameter serves as a convenience.  If you do not want to use
          this parameter, pass VI_NULL.
          
          Use this parameter in complex functions to keep track of whether you
          obtain a lock and therefore need to unlock the session.
          Pass the address of a local ViBoolean variable.  In the declaration
          of the local variable, initialize it to VI_FALSE.  Pass the address
          of the same local variable to any other calls you make to
          pi40iv_LockSession or pi40iv_UnlockSession in the same function.
          
          The parameter is an input/output parameter.  pi40iv_LockSession and
          pi40iv_UnlockSession each inspect the current value and take the
          following actions:
          
          - If the value is VI_TRUE, pi40iv_LockSession does not lock the
          session again.  If the value is VI_FALSE, pi40iv_LockSession obtains
          the lock and sets the value of the parameter to VI_TRUE.
          
          - If the value is VI_FALSE, pi40iv_UnlockSession does not attempt to
          unlock the session.  If the value is VI_TRUE, pi40iv_UnlockSession
          releases the lock and sets the value of the parameter to VI_FALSE.
          
          Thus, you can, call pi40iv_UnlockSession at the end of your function
          without worrying about whether you actually have the lock.
          
          Example:
          
          ViStatus TestFunc (ViSession vi, ViInt32 flags)
          {
              ViStatus error = VI_SUCCESS;
              ViBoolean haveLock = VI_FALSE;
          
              if (flags & BIT_1)
                  {
                  viCheckErr( pi40iv_LockSession(vi, &haveLock));
                  viCheckErr( TakeAction1(vi));
                  if (flags & BIT_2)
                      {
                      viCheckErr( pi40iv_UnlockSession(vi, &haveLock));
                      viCheckErr( TakeAction2(vi));
                      viCheckErr( pi40iv_LockSession(vi, &haveLock);
                      }
                  if (flags & BIT_3)
                      viCheckErr( TakeAction3(vi));
                  }
          
          Error:
              /*
                 At this point, you cannot really be sure that
                 you have the lock.  Fortunately, the haveLock
                 variable takes care of that for you.
              */
              pi40iv_UnlockSession(vi, &haveLock);
              return error;
          }

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
          
________________________________________________________________________________

  pi40iv_WaitForDebounce

      ViStatus pi40iv_WaitForDebounce (ViSession instrumentHandle,
                                       ViInt32 maximumTime_ms);

  Purpose

      This function returns after all the paths that you create have settled.
      
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None

      maximumTime_ms

          Variable Type       ViInt32

          Specifies the maximum length of time for this function to wait until
          all switches in the switch module debounce.
          If the time you specify elapses before all switches debounce, this
          function returns a timeout error.
          
          The units are milliseconds.

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
________________________________________________________________________________

  pi40iv_WriteCal

      ViStatus pi40iv_WriteCal (ViSession instrumentHandle,
                                ViInt32 outputSubNumber, ViInt32 index,
                                ViInt32 data);

  Purpose

      write a calibration value to EEPROM
      

  Parameter List

      instrumentHandle

          Variable Type       ViSession

          The ViSession handle that you obtain from the pi40iv_init or
          pi40iv_InitWithOptions function.  The handle identifies a particular
          instrument session.
          
          Default Value:  None
          

      outputSubNumber

          Variable Type       ViInt32

          sub-unit of target to access (unity-based)

      index

          Variable Type       ViInt32

          calibration value index number (unity-based)
          

      data

          Variable Type       ViInt32

          calibration value to write
          
          

  Return Value

          Returns the status code of this operation.  The status code  either
          indicates success or describes an error or warning condition.  You
          examine the status code from each call to an instrument driver
          function to determine if an error occurred.
          
          To obtain a text description of the status code, call the
          pi40iv_error_message function.  To obtain additional information
          about the error condition, call the pi40iv_GetErrorInfo function.  To
          clear the error information from the driver, call the
          pi40iv_ClearErrorInfo function.
          
          The general meaning of the status code is as follows:
          
          Value                  Meaning
          -------------------------------
          0                      Success
          Positive Values        Warnings
          Negative Values        Errors
          
          This driver defines the following status codes:
          
          Status    Description
          -------------------------------------------------
          WARNINGS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined warning codes here.
           *================================================END=CHANGE=*/
          
          ERRORS:
          /*=CHANGE:===================================================*
          Insert Instrument-defined error codes here.
           *================================================END=CHANGE=*/
          
          This instrument driver also returns errors and warnings defined by
          other sources.  The following table defines the ranges of additional
          status codes that this driver can return.  The table lists the
          different include files that contain the defined constants for the
          particular status codes:
          
          Numeric Range (in Hex)   Status Code Types
          -------------------------------------------------
          3FFA2000 to 3FFA3FFF     IviSwtch Warnings
          3FFA0000 to 3FFA1FFF     IVI      Warnings
          3FFF0000 to 3FFFFFFF     VISA     Warnings
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
          
          BFFA2000 to BFFA3FFF     IviSwtch Errors
          BFFA0000 to BFFA1FFF     IVI      Errors
          BFFF0000 to BFFFFFFF     VISA     Errors
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors

________________________________________________________________________________

Attribute Information for the Following Functions:

        pipx40_SetAttributeViInt32
        pipx40_GetAttributeViInt32
        pipx40_CheckAttributeViInt32
        pipx40_SetAttributeViReal64
        pipx40_GetAttributeViReal64
        pipx40_CheckAttributeViReal64
        pipx40_SetAttributeViString
        pipx40_GetAttributeViString
        pipx40_CheckAttributeViString
        pipx40_SetAttributeViBoolean
        pipx40_GetAttributeViBoolean
        pipx40_CheckAttributeViBoolean
        pipx40_SetAttributeViSession
        pipx40_GetAttributeViSession
        pipx40_CheckAttributeViSession

   Inherent IVI Attributes
      User Options
         Range Check                              PIPX40_ATTR_RANGE_CHECK
         Query Instrument Status                  PIPX40_ATTR_QUERY_INSTR_STATUS
         Cache                                    PIPX40_ATTR_CACHE
         Simulate                                 PIPX40_ATTR_SIMULATE
         Record Value Coercions                   PIPX40_ATTR_RECORD_COERCIONS
      Driver Identification
         Description                              PIPX40_ATTR_SPECIFIC_DRIVER_DESCRIPTION
         Driver Prefix                            PIPX40_ATTR_SPECIFIC_DRIVER_PREFIX
         Driver Vendor                            PIPX40_ATTR_SPECIFIC_DRIVER_VENDOR
         Major Version                            PIPX40_ATTR_SPECIFIC_DRIVER_MAJOR_VERSION
         Minor Version                            PIPX40_ATTR_SPECIFIC_DRIVER_MINOR_VERSION
         Revision                                 PIPX40_ATTR_SPECIFIC_DRIVER_REVISION
         Class Specification Major Version        PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION
         Class Specification Minor Version        PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION
      Driver Capabilities
         Supported Instrument Models              PIPX40_ATTR_SUPPORTED_INSTRUMENT_MODELS
         Class Group Capabilities                 PIPX40_ATTR_GROUP_CAPABILITIES
         Number of Channels                       PIPX40_ATTR_NUM_CHANNELS
      Instrument Identification
         Manufacturer                             PIPX40_ATTR_INSTRUMENT_MANUFACTURER
         Model                                    PIPX40_ATTR_INSTRUMENT_MODEL
         Firmware Revision                        PIPX40_ATTR_INSTRUMENT_FIRMWARE_REVISION
      Error Info
         Primary Error                            PIPX40_ATTR_PRIMARY_ERROR
         Secondary Error                          PIPX40_ATTR_SECONDARY_ERROR
         Error Elaboration                        PIPX40_ATTR_ERROR_ELABORATION
      Advanced Session Information
         Logical Name                             PIPX40_ATTR_LOGICAL_NAME
         Resource Descriptor                      PIPX40_ATTR_RESOURCE_DESCRIPTOR
         I/O Session Type                         PIPX40_ATTR_IO_SESSION_TYPE
         Instrument I/O Session                   PIPX40_ATTR_IO_SESSION
   Channel Configuration
      Is Source Channel                           PIPX40_ATTR_IS_SOURCE_CHANNEL
      Is Configuration Channel                    PIPX40_ATTR_IS_CONFIGURATION_CHANNEL
   Module Characteristics
      Is Debounced                                PIPX40_ATTR_IS_DEBOUNCED
      Settling Time                               PIPX40_ATTR_SETTLING_TIME
      Bandwidth                                   PIPX40_ATTR_BANDWIDTH
      Maximum DC Voltage                          PIPX40_ATTR_MAX_DC_VOLTAGE
      Maximum AC Voltage                          PIPX40_ATTR_MAX_AC_VOLTAGE
      Maximum Switching DC Current                PIPX40_ATTR_MAX_SWITCHING_DC_CURRENT
      Maximum Switching AC Current                PIPX40_ATTR_MAX_SWITCHING_AC_CURRENT
      Maximum Carry DC Current                    PIPX40_ATTR_MAX_CARRY_DC_CURRENT
      Maximum Carry AC Current                    PIPX40_ATTR_MAX_CARRY_AC_CURRENT
      Maximum Switching DC Power                  PIPX40_ATTR_MAX_SWITCHING_DC_POWER
      Maximum Switching AC Power                  PIPX40_ATTR_MAX_SWITCHING_AC_POWER
      Maximum Carry DC Power                      PIPX40_ATTR_MAX_CARRY_DC_POWER
      Maximum Carry AC Power                      PIPX40_ATTR_MAX_CARRY_AC_POWER
      Characteristic Impedance                    PIPX40_ATTR_CHARACTERISTIC_IMPEDANCE
   Scanning Configuration
      Scan List                                   PIPX40_ATTR_SCAN_LIST
      Scan Mode                                   PIPX40_ATTR_SCAN_MODE
      Continuous Scan                             PIPX40_ATTR_CONTINUOUS_SCAN
      Trigger Input                               PIPX40_ATTR_TRIGGER_INPUT
      Scan Advanced Output                        PIPX40_ATTR_SCAN_ADVANCED_OUTPUT
      Is Scanning                                 PIPX40_ATTR_IS_SCANNING
      Scan Delay                                  PIPX40_ATTR_SCAN_DELAY
   Matrix Configuration
      Number of Rows                              PIPX40_ATTR_NUM_OF_ROWS
      Number of Columns                           PIPX40_ATTR_NUM_OF_COLUMNS
      Wire mode                                   PIPX40_ATTR_WIRE_MODE
   Miscellaneous Attributes
      Manufacturer ID                             PIPX40_ATTR_VXI_MANF_ID
      Model Code                                  PIPX40_ATTR_VXI_MODEL_CODE


PIPX40_ATTR_BANDWIDTH
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the bandwidth for the
channel.
    The units are hertz.


PIPX40_ATTR_CACHE
Data Type:     ViBoolean
Description:   Specifies whether to cache the value of attributes.  When
caching is enabled, the instrument driver keeps track of the current instrument
settings and avoids sending redundant commands to the instrument.  Thus, you
can significantly increase execution speed.
    The instrument driver can choose always to cache or never to cache
particular attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use the pipx40_InitWithOptions function to
override this value.


PIPX40_ATTR_CHARACTERISTIC_IMPEDANCE
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the characteristic
impedance for the channel.
    The units are ohms.


PIPX40_ATTR_CONTINUOUS_SCAN
Data Type:     ViBoolean
Description:   This attribute specifies whether the switch module continues
scanning from the top of the scan list after reaching the end of the list.  A
value of VI_TRUE indicates that the switch module continuously scans.  A value
of VI_FALSE indicates that the switch module does not continuously scan.
    If you set this attribute to VI_TRUE, the function
pipx40_WaitForScanComplete always times out, and you must call
@REPALCE[Prefix]_Abort to stop the scan.


PIPX40_ATTR_ERROR_ELABORATION
Data Type:     ViString
Description:   An optional string that contains additional information
concerning the primary error condition.


PIPX40_ATTR_GROUP_CAPABILITIES
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains a comma-separated list of class-extention
groups that this driver implements.


PIPX40_ATTR_INSTRUMENT_FIRMWARE_REVISION
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains the firmware revision information for the
instrument you are currently using.


PIPX40_ATTR_INSTRUMENT_MANUFACTURER
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains the name of the instrument manufacturer
you are currently using.


PIPX40_ATTR_INSTRUMENT_MODEL
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains the model number or name of the
instrument that you are currently using.


PIPX40_ATTR_IO_SESSION
Data Type:     ViSession
Restrictions:  Not settable.
Description:   Specifies the I/O session that the specific driver uses to
communicate with the instrument.


PIPX40_ATTR_IO_SESSION_TYPE
Data Type:     ViString
Restrictions:  Not settable.
Description:   Contains the type of the I/O session that this driver uses to
communicate with the instrument.


PIPX40_ATTR_IS_CONFIGURATION_CHANNEL
Data Type:     ViBoolean
Description:   This channel-based attribute specifies whether to reserve the
channel for internal path creation.  A channel that is available for internal
path creation is called a configuration channel.  The driver may use
configuration channels to create paths between two channels you specify in the
pipx40_Connect function.  Configuration channels are not available for external
connections.
    Set this attribute to VI_TRUE to mark the channel as a configuration
channel.  Set this attribute to VI_FALSE to mark the channel as available for
external connections.
    After you identify a channel as a configuration channel, you cannot use
that channel for external connections.  The pipx40_Connect function returns the
PIPX40_ERROR_IS_CONFIGURATION_CHANNEL error when you attempt to establish a
connection between a configuration channel and any other channel.


PIPX40_ATTR_IS_DEBOUNCED
Data Type:     ViBoolean
Restrictions:  Not settable.
Description:   This attribute indicates whether the entire switch module has
settled since the last switching command.  A value of VI_TRUE indicates that
all signals going through the switch module are valid.


PIPX40_ATTR_IS_SCANNING
Data Type:     ViBoolean
Restrictions:  Not settable.
Description:   This attribute indicates whether the switch module has completed
the scan operation.  The value VI_TRUE indicates that the scan is complete.


PIPX40_ATTR_IS_SOURCE_CHANNEL
Data Type:     ViBoolean
Description:   This channel-based attribute specifies whether you want to
identify the channel as a source channel.  Typically, you set this attribute to
VI_TRUE when you attach the channel to a power supply, a function generator, or
an active measurement point on the unit under test, and you do not want to
connect the channel to another source.  The driver prevents source channels
from connecting to each other.  The pipx40_Connect function returns the
PIPX40_ERROR_ATTEMPT_TO_CONNECT_SOURCES when you attempt to connect two
channels that you identify as source channels.


PIPX40_ATTR_LOGICAL_NAME
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string containing the logical name you specified when opening
the current IVI session.
     You may pass a logical name to the pipx40_init or pipx40_InitWithOptions
functions.  The IVI Configuration utility must contain an entry for the logical
name.  The logical name entry refers to a virtual instrument section in the IVI
Configuration file.  The virtual instrument section specifies a physical device
and initial user options.


PIPX40_ATTR_MAX_AC_VOLTAGE
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum AC voltage the
channel can switch.
    The units are volts RMS.


PIPX40_ATTR_MAX_CARRY_AC_CURRENT
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum AC current the
channel can carry.
    The units are amperes RMS.


PIPX40_ATTR_MAX_CARRY_AC_POWER
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum AC power the
channel can carry.
    The units are volt-amperes.


PIPX40_ATTR_MAX_CARRY_DC_CURRENT
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum DC current the
channel can carry.
    The units are amperes.


PIPX40_ATTR_MAX_CARRY_DC_POWER
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum DC power the
channel can carry.
    The units are watts.


PIPX40_ATTR_MAX_DC_VOLTAGE
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum DC voltage the
channel can switch.
    The units are volts.


PIPX40_ATTR_MAX_SWITCHING_AC_CURRENT
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum AC current the
channel can switch.
    The units are amperes RMS.


PIPX40_ATTR_MAX_SWITCHING_AC_POWER
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum AC power the
channel can switch.
    The units are volt-amperes.


PIPX40_ATTR_MAX_SWITCHING_DC_CURRENT
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum DC current the
channel can switch.
    The units are amperes.


PIPX40_ATTR_MAX_SWITCHING_DC_POWER
Data Type:     ViReal64
Restrictions:  Not settable.
Description:   This channel-based attribute returns the maximum DC power the
channel can switch.
    The units are watts.


PIPX40_ATTR_NUM_CHANNELS
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   Indicates the number of channels that the specific instrument
driver supports.
    For each attribute for which the IVI_VAL_MULTI_CHANNEL flag attribute is
set, the IVI engine maintains a separate cache value for each channel.


PIPX40_ATTR_NUM_OF_COLUMNS
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   This attribute returns the number of columns of a matrix or
scanner.  If the switch module is a scanner, this value is the number of input
channels.
    The PIPX40_ATTR_WIRE_MODE attribute affects the number of available
columns.  For example, if your module has 8 input lines and you use the
four-wire mode, then the number of columns you have available is 2.


PIPX40_ATTR_NUM_OF_ROWS
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   This attribute returns the number of rows of a matrix or
scanner.  If the switch module is a scanner, this value is the number of output
channels.
    The PIPX40_ATTR_WIRE_MODE attribute affects the number of available rows.
For example, if your module has 2 output lines and you use the two-wire mode,
then the number of rows you have available is 1.


PIPX40_ATTR_PRIMARY_ERROR
Data Type:     ViInt32
Description:   A code that describes the first error that occurred since the
last call to pipx40_GetErrorInfo on the session.  The value follows the
VXIplug&play completion code conventions.  A negative value describes an error
condition.  A positive value describes a warning condition and indicates that
no error occurred.  A zero indicates that no error or warning occurred. The
error and warning values can be status codes defined by IVI, VISA, class
drivers, or specific drivers.


PIPX40_ATTR_QUERY_INSTR_STATUS
Data Type:     ViBoolean
Description:   Specifies whether the instrument driver queries the instrument
status after each operation.  Querying the instrument status is very useful for
debugging.  After you validate your program, you can set this attribute to
VI_FALSE to disable status checking and maximize performance
    The instrument driver can choose to ignore status checking for particular
attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use the pipx40_InitWithOptions function to
override this value.


PIPX40_ATTR_RANGE_CHECK
Data Type:     ViBoolean
Description:   Specifies whether to validate attribute values and function
parameters.  If enabled, the instrument driver validates the parameter values
that you pass to driver functions.  Range checking parameters is very useful
for debugging.  After you validate your program, you can set this attribute to
VI_FALSE to disable range checking and maximize performance.
    The default value is VI_TRUE.   Use the pipx40_InitWithOptions function to
override this value.


PIPX40_ATTR_RECORD_COERCIONS
Data Type:     ViBoolean
Description:   Specifies whether the IVI engine keeps a list of the value
coercions it makes for ViInt32 and ViReal64 attributes.  You call
pipx40_GetNextCoercionRecord to extract and delete the oldest coercion record
from the list.
    The default value is VI_FALSE.   Use the pipx40_InitWithOptions function to
override this value.


PIPX40_ATTR_RESOURCE_DESCRIPTOR
Data Type:     ViString
Restrictions:  Not settable.
Description:   Indicates the resource descriptor the driver uses to identify
the physical device.
    If you initialize the driver with a logical name, this attribute contains
the resource descriptor that corresponds to the entry in the IVI Configuration
utility.
    If you initialize the instrument driver with the resource descriptor, this
attribute contains that value.


PIPX40_ATTR_SCAN_ADVANCED_OUTPUT
Data Type:     ViInt32
Description:   This attribute specifies the method you want to use to notify
another instrument that all signals going through the switch module have
settled following the processing of one entry in the scan list.
Values:
   PIPX40_VAL_NONE                                0
         The switch module does not produce a Scan Advanced Output trigger.
   PIPX40_VAL_EXTERNAL                            2
         External Trigger. The switch module produces the Scan Advanced Output
         trigger on the external trigger output.
   PIPX40_VAL_GPIB_SRQ                            5
         The switch module produces the GPIB Service Request in place of the
         Scan Advanced Output trigger.
   PIPX40_VAL_TTL0                                111
         The switch module produces the Scan Advanced Output on the VXIbus TTL0
         or PXI TRIG0 line.
   PIPX40_VAL_TTL1                                112
         The switch module produces the Scan Advanced Output on the VXIbus TTL1
         or PXI TRIG1 line.
   PIPX40_VAL_TTL2                                113
         The switch module produces the Scan Advanced Output on the VXIbus TTL2
         or PXI TRIG2 line.
   PIPX40_VAL_TTL3                                114
         The switch module produces the Scan Advanced Output on the VXIbus TTL3
         or PXI TRIG3 line.
   PIPX40_VAL_TTL4                                115
         The switch module produces the Scan Advanced Output on the VXIbus TTL4
         or PXI TRIG4 line.
   PIPX40_VAL_TTL5                                116
         The switch module produces the Scan Advanced Output on the VXIbus TTL5
         or PXI TRIG5 line.
   PIPX40_VAL_TTL6                                117
         The switch module produces the Scan Advanced Output on the VXIbus TTL6
         or PXI TRIG6 line.
   PIPX40_VAL_TTL7                                118
         The switch module produces the Scan Advanced Output on the VXIbus TTL7
         or PXI TRIG7 line.
   PIPX40_VAL_ECL0                                119
         The switch module produces the Scan Advanced Output on the VXIbus ECL0
         line.
   PIPX40_VAL_ECL1                                120
         The switch module produces the Scan Advanced Output on the VXIbus ECL1
         line.
   PIPX40_VAL_PXI_STAR                            125
         The switch module produces the Scan Advanced Output on the PXI STAR
         trigger bus.
   PIPX40_VAL_RTSI_0                              140
         The switch module produces the Scan Advanced Output on RTSI line 0.
   PIPX40_VAL_RTSI_1                              141
         The switch module produces the Scan Advanced Output on RTSI line 1.
   PIPX40_VAL_RTSI_2                              142
         The switch module produces the Scan Advanced Output on RTSI line 2.
   PIPX40_VAL_RTSI_3                              143
         The switch module produces the Scan Advanced Output on RTSI line 3.
   PIPX40_VAL_RTSI_4                              144
         The switch module produces the Scan Advanced Output on RTSI line 4.
   PIPX40_VAL_RTSI_5                              145
         The switch module produces the Scan Advanced Output on RTSI line 5.
   PIPX40_VAL_RTSI_6                              146
         The switch module produces the Scan Advanced Output on RTSI line 6.


PIPX40_ATTR_SCAN_DELAY
Data Type:     ViReal64
Description:   This attribute specifies the minimum amount of time the switch
module waits before it asserts the scan advanced output trigger after opening
or closing the switch.  The switch module always waits for debounce before
asserting the trigger.  Thus, the actual delay will always be the greater value
of the settling time and the value you specify as the switch delay.
The units are seconds.
    Due to different designs of the switch modules, the actual time might be
longer.


PIPX40_ATTR_SCAN_LIST
Data Type:     ViString
Description:   This attribute contains a scan list, which is a string that
specifies channel connections and trigger conditions.  The pipx40_InitiateScan
function makes or breaks connections and waits for triggers according to the
instructions in the scan list.
    The scan list is comprised of channel names that you separate with special
characters.  These special characters determine the operations the scanner
performs on the channels when it executes this scan list.

To create a path between two channels, use the following character between the
two channel names:
    -> (a dash followed by a '>' sign)
Example: "CH1->CH2" tells the switch to make a path from channel CH1 to channel
CH2.

To break or clear a path, use the following character as a prefix before the
path:
    ~ (tilde)
Example: "~CH1->CH2" tells the switch to break the path from channel CH1 to
channel CH2.

To tell the switch module to wait for a trigger event, use the following
character as a separator between paths:
    ; (semicolon)
Example: "CH1->CH2;CH3->CH4" tells the switch to make the path from channel CH1
to channel CH2, wait for a trigger, and then make the path from CH3 to CH4.

To tell the switch module to create multiple paths simultaneously, use the
following character as a separator between the paths:
    , (comma)
Example: "A->B;CH1->CH2,CH3->CH4" instructs the scanner to make the path
between channels A and B, wait for a trigger, and then simultaneously make the
paths between channels CH1 and CH2 and between channels CH3 and CH4.


PIPX40_ATTR_SCAN_MODE
Data Type:     ViInt32
Description:   This attribute specifies what happens to existing connections
that conflict with the connections you make in a scan list.  For example, if
CH1 is already connected to CH2 and the scan list instructs the switch module
to connect CH1 to CH3, this attribute specifies what happens to the connection
between CH1 and CH2.
    If the value of this attribute is PIPX40_VAL_NONE, the switch module takes
no action on existing paths.  If the value is PIPX40_VAL_BREAK_BEFORE_MAKE, the
switch module breaks conflicting paths before making new ones.  If the value is
PIPX40_VAL_BREAK_AFTER_MAKE, the switch module breaks conflicting paths after
making new ones.
    Most switch modules support only one of the possible values.  In such
cases, this attribute serves as an indicator of the module's behavior.
Values:
   PIPX40_VAL_NONE                                0
         No implicit action on connections when scanning
   PIPX40_VAL_BREAK_BEFORE_MAKE                   1
         When scanning, the switch module breaks existing connections before
         making new connections.
   PIPX40_VAL_BREAK_AFTER_MAKE                    2
         When scanning, the switch module breaks existing connections after
         making new connections.


PIPX40_ATTR_SECONDARY_ERROR
Data Type:     ViInt32
Description:   An optional code that provides additional information concerning
the primary error condition.  The error and warning values can be status codes
defined by IVI, VISA, class drivers, or specific drivers.  Zero indicates no
additional information.


PIPX40_ATTR_SETTLING_TIME
Data Type:     ViReal64
Description:   This channel-based attribute returns the maximum length of time
from after you make a connection until the signal flowing through the channel
settles.
    The units are seconds.


PIPX40_ATTR_SIMULATE
Data Type:     ViBoolean
Description:   Specifies whether or not to simulate instrument driver I/O
operations.  If simulation is enabled, instrument driver functions perform
range checking and call Ivi_GetAttribute and Ivi_SetAttribute functions, but
they do not perform instrument I/O.  For output parameters that represent
instrument data, the instrument driver functions return calculated values.
    The default value is VI_FALSE.   Use the pipx40_InitWithOptions function to
override this value.


PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   The major version number of the class specification with which
this driver is compliant.


PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   The minor version number of the class specification with which
this driver is compliant.


PIPX40_ATTR_SPECIFIC_DRIVER_DESCRIPTION
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains a brief description of the specific
driver


PIPX40_ATTR_SPECIFIC_DRIVER_MAJOR_VERSION
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   The major version number of this instrument driver.


PIPX40_ATTR_SPECIFIC_DRIVER_MINOR_VERSION
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   The minor version number of this instrument driver.


PIPX40_ATTR_SPECIFIC_DRIVER_PREFIX
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains the prefix for the instrument driver.
The name of each user-callable function in this driver starts with this prefix.


PIPX40_ATTR_SPECIFIC_DRIVER_REVISION
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains additional version information about this
instrument driver.


PIPX40_ATTR_SPECIFIC_DRIVER_VENDOR
Data Type:     ViString
Restrictions:  Not settable.
Description:   A string that contains the name of the vendor that supplies this
driver.


PIPX40_ATTR_SUPPORTED_INSTRUMENT_MODELS
Data Type:     ViString
Restrictions:  Not settable.
Description:   Contains a model code of the instrument. For drivers that
support more than one device, this attribute contains a comma-separated list of
supported instrument models.


PIPX40_ATTR_TRIGGER_INPUT
Data Type:     ViInt32
Description:   This attribute specifies the source of the trigger for which the
switch module can wait when processing a scan list.  The switch module waits
for a trigger when it encounters a semicolon in a scan list.  When the trigger
occurs, the switch module advances to the next entry in the scan list.
Values:
   PIPX40_VAL_IMMEDIATE                           1
         Immediate Trigger. The switch module does not wait for a trigger
         before processing the next entry in the scan list.
   PIPX40_VAL_EXTERNAL                            2
         External Trigger. The switch module waits until it receives a trigger
         from an external source through the external trigger input before
         processing the next entry in the scan list.
   PIPX40_VAL_SOFTWARE_TRIG                       3
         The switch module waits until you call the pipx40_SendSoftwareTrigger
         function before processing the next entry in the scan list.
   PIPX40_VAL_TTL0                                111
         The switch module waits until it receives a trigger on the VXIbus TTL0
         or PXI TRIG0 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL1                                112
         The switch module waits until it receives a trigger on the VXIbus TTL1
         or PXI TRIG1 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL2                                113
         The switch module waits until it receives a trigger on the VXIbus TTL2
         or PXI TRIG2 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL3                                114
         The switch module waits until it receives a trigger on the VXIbus TTL3
         or PXI TRIG3 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL4                                115
         The switch module waits until it receives a trigger on the VXIbus TTL4
         or PXI TRIG4 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL5                                116
         The switch module waits until it receives a trigger on the VXIbus TTL5
         or PXI TRIG5 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL6                                117
         The switch module waits until it receives a trigger on the VXIbus TTL6
         or PXI TRIG6 line before processing the next entry in the scan list.
   PIPX40_VAL_TTL7                                118
         The switch module waits until it receives a trigger on the VXIbus TTL7
         or PXI TRIG7 line before processing the next entry in the scan list.
   PIPX40_VAL_ECL0                                119
         The switch module waits until it receives a trigger on the VXIbus ECL0
         line before processing the next entry in the scan list.
   PIPX40_VAL_ECL1                                120
         The switch module waits until it receives a trigger on the VXIbus ECL1
         line before processing the next entry in the scan list.
   PIPX40_VAL_PXI_STAR                            125
         The switch module waits until it receives a trigger on the PXI STAR
         trigger bus before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_0                              140
         The switch module waits until it receives a trigger on RTSI line 0
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_1                              141
         The switch module waits until it receives a trigger on RTSI line 1
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_2                              142
         The switch module waits until it receives a trigger on RTSI line 2
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_3                              143
         The switch module waits until it receives a trigger on RTSI line 3
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_4                              144
         The switch module waits until it receives a trigger on RTSI line 4
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_5                              145
         The switch module waits until it receives a trigger on RTSI line 5
         before processing the next entry in the scan list.
   PIPX40_VAL_RTSI_6                              146
         The switch module waits until it receives a trigger on RTSI line 6
         before processing the next entry in the scan list.


PIPX40_ATTR_VXI_MANF_ID
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   Returns the manufacturer identification number of the VXIbus
device.  The instrument driver gets the value of this attribute when you pass
VI_TRUE for the ID Query parameter to the pipx40_init or pipx40_InitWithOptions
function.


PIPX40_ATTR_VXI_MODEL_CODE
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   Returns the model code for the VXIbus device.  The instrument
driver gets the value of this attribute when you pass VI_TRUE for the ID Query
parameter to the pipx40_init or pipx40_InitWithOptions function.


PIPX40_ATTR_WIRE_MODE
Data Type:     ViInt32
Restrictions:  Not settable.
Description:   This attribute specifies the wire mode of the switch module.
    This attribute affects the values of the PIPX40_ATTR_NUM_OF_ROWS and
PIPX40_ATTR_NUM_OF_COLUMNS attributes.   The actual number of input and output
lines on the switch module is fixed, but the number of channels depends on how
many lines constitute each channel.


