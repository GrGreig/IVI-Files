FPAttributeValueFile
n SubType="IVI"
n SubVersion="1"

v Boolean_values
 VI_TRUE (1)
  "True"

 VI_FALSE (0)
  "False"

v attrScanModeRangeTable DataType="i" 
 PIPX40_VAL_NONE (0)
  "No implicit action on connections when scanning"

 PIPX40_VAL_BREAK_BEFORE_MAKE (1)
  "When scanning, the switch module breaks existing connections before "
  "making new connections."

 PIPX40_VAL_BREAK_AFTER_MAKE (2)
  "When scanning, the switch module breaks existing connections after "
  "making new connections."

v attrTriggerInputRangeTable DataType="i" 
 PIPX40_VAL_IMMEDIATE (1)
  "Immediate Trigger. The switch module does not wait "
  "for a trigger before processing the next entry in the "
  "scan list."

 PIPX40_VAL_EXTERNAL (2)
  "External Trigger. The switch module waits until it receives a trigger "
  "from an external source through the external trigger input before "
  "processing the next entry in the scan list."

 PIPX40_VAL_SOFTWARE_TRIG (3)
  "The switch module waits until you call the pipx40_SendSoftwareTrigger function "
  "before processing the next entry in the scan list."

 PIPX40_VAL_TTL0 (111)
  "The switch module waits until it receives a trigger on the VXIbus TTL0 or "
  "PXI TRIG0 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL1 (112)
  "The switch module waits until it receives a trigger on the VXIbus TTL1 or "
  "PXI TRIG1 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL2 (113)
  "The switch module waits until it receives a trigger on the VXIbus TTL2 or "
  "PXI TRIG2 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL3 (114)
  "The switch module waits until it receives a trigger on the VXIbus TTL3 or "
  "PXI TRIG3 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL4 (115)
  "The switch module waits until it receives a trigger on the VXIbus TTL4 or "
  "PXI TRIG4 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL5 (116)
  "The switch module waits until it receives a trigger on the VXIbus TTL5 or "
  "PXI TRIG5 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL6 (117)
  "The switch module waits until it receives a trigger on the VXIbus TTL6 or "
  "PXI TRIG6 line before processing the next entry in the scan list."

 PIPX40_VAL_TTL7 (118)
  "The switch module waits until it receives a trigger on the VXIbus TTL7 or "
  "PXI TRIG7 line before processing the next entry in the scan list."

 PIPX40_VAL_ECL0 (119)
  "The switch module waits until it receives a trigger on the VXIbus ECL0 line "
  "before processing the next entry in the scan list."

 PIPX40_VAL_ECL1 (120)
  "The switch module waits until it receives a trigger on the VXIbus ECL1 line "
  "before processing the next entry in the scan list."

 PIPX40_VAL_PXI_STAR (125)
  "The switch module waits until it receives a trigger on the PXI STAR trigger bus "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_0 (140)
  "The switch module waits until it receives a trigger on RTSI line 0 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_1 (141)
  "The switch module waits until it receives a trigger on RTSI line 1 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_2 (142)
  "The switch module waits until it receives a trigger on RTSI line 2 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_3 (143)
  "The switch module waits until it receives a trigger on RTSI line 3 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_4 (144)
  "The switch module waits until it receives a trigger on RTSI line 4 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_5 (145)
  "The switch module waits until it receives a trigger on RTSI line 5 "
  "before processing the next entry in the scan list."

 PIPX40_VAL_RTSI_6 (146)
  "The switch module waits until it receives a trigger on RTSI line 6 "
  "before processing the next entry in the scan list."

v attrScanAdvancedOutputRangeTable DataType="i" 
 PIPX40_VAL_NONE (0)
  "The switch module does not produce a Scan Advanced Output trigger."

 PIPX40_VAL_EXTERNAL (2)
  "External Trigger. The switch module produces the Scan Advanced Output "
  "trigger on the external trigger output."

 PIPX40_VAL_GPIB_SRQ (5)
  "The switch module produces the GPIB Service Request "
  "in place of the Scan Advanced Output trigger."

 PIPX40_VAL_TTL0 (111)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL0 or "
  "PXI TRIG0 line."

 PIPX40_VAL_TTL1 (112)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL1 or "
  "PXI TRIG1 line."

 PIPX40_VAL_TTL2 (113)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL2 or "
  "PXI TRIG2 line."

 PIPX40_VAL_TTL3 (114)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL3 or "
  "PXI TRIG3 line."

 PIPX40_VAL_TTL4 (115)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL4 or "
  "PXI TRIG4 line."

 PIPX40_VAL_TTL5 (116)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL5 or "
  "PXI TRIG5 line."

 PIPX40_VAL_TTL6 (117)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL6 or "
  "PXI TRIG6 line."

 PIPX40_VAL_TTL7 (118)
  "The switch module produces the Scan Advanced Output on the VXIbus TTL7 or "
  "PXI TRIG7 line."

 PIPX40_VAL_ECL0 (119)
  "The switch module produces the Scan Advanced Output on the VXIbus ECL0 line."

 PIPX40_VAL_ECL1 (120)
  "The switch module produces the Scan Advanced Output on the VXIbus ECL1 line."

 PIPX40_VAL_PXI_STAR (125)
  "The switch module produces the Scan Advanced Output on the PXI STAR trigger bus."

 PIPX40_VAL_RTSI_0 (140)
  "The switch module produces the Scan Advanced Output on RTSI line 0."

 PIPX40_VAL_RTSI_1 (141)
  "The switch module produces the Scan Advanced Output on RTSI line 1."

 PIPX40_VAL_RTSI_2 (142)
  "The switch module produces the Scan Advanced Output on RTSI line 2."

 PIPX40_VAL_RTSI_3 (143)
  "The switch module produces the Scan Advanced Output on RTSI line 3."

 PIPX40_VAL_RTSI_4 (144)
  "The switch module produces the Scan Advanced Output on RTSI line 4."

 PIPX40_VAL_RTSI_5 (145)
  "The switch module produces the Scan Advanced Output on RTSI line 5."

 PIPX40_VAL_RTSI_6 (146)
  "The switch module produces the Scan Advanced Output on RTSI line 6."

0 pipx40_SetAttributeViInt32     3 4 false s  DataType="ViInt32"
0 pipx40_GetAttributeViInt32     3 4 false g  DataType="ViInt32"
0 pipx40_CheckAttributeViInt32   3 4 false s  DataType="ViInt32"
0 pipx40_SetAttributeViReal64    3 4 false s  DataType="ViReal64"
0 pipx40_GetAttributeViReal64    3 4 false g  DataType="ViReal64"
0 pipx40_CheckAttributeViReal64  3 4 false s  DataType="ViReal64"
0 pipx40_SetAttributeViString    3 4 false s  DataType="ViString"
0 pipx40_GetAttributeViString    3 5 false g  DataType="ViString"
0 pipx40_CheckAttributeViString  3 4 false s  DataType="ViString"
0 pipx40_SetAttributeViBoolean   3 4 false s  DataType="ViBoolean"
0 pipx40_GetAttributeViBoolean   3 4 false g  DataType="ViBoolean"
0 pipx40_CheckAttributeViBoolean 3 4 false s  DataType="ViBoolean"
0 pipx40_SetAttributeViSession   3 4 false s  DataType="ViSession"
0 pipx40_GetAttributeViSession   3 4 false g  DataType="ViSession"
0 pipx40_CheckAttributeViSession 3 4 false s  DataType="ViSession"

1 all "Inherent IVI Attributes" "Attributes common to all IVI instrument drivers."

2 all "User Options" 
 "Attributes you can set to affect the operation of this instrument driver.\n"
 "    "

3 all "Range Check" PIPX40_ATTR_RANGE_CHECK ViBoolean gs Boolean_values 
 "Specifies whether to validate attribute values and function parameters.  "
 "If enabled, the instrument driver validates the parameter values that "
 "you pass to driver functions.  Range checking "
 "parameters is very useful for debugging.  After you validate your program, "
 "you can set this attribute to VI_FALSE to disable range checking and "
 "maximize performance.\n"
 "    The default value is VI_TRUE.   Use the "
 "pipx40_InitWithOptions function to override this value.\n"
 "    "

3 all "Query Instrument Status" PIPX40_ATTR_QUERY_INSTR_STATUS ViBoolean gs Boolean_values 
 "Specifies whether the instrument driver queries the instrument status "
 "after each operation.  Querying the instrument status is very useful "
 "for debugging.  After you validate your program, you can set this "
 "attribute to VI_FALSE to disable status checking and maximize "
 "performance\n"
 "    The instrument driver can choose to ignore status checking for "
 "particular attributes regardless of the setting of this attribute.\n"
 "    The default value is VI_TRUE.   Use the "
 "pipx40_InitWithOptions function to override this value.\n"
 "    "

3 all "Cache" PIPX40_ATTR_CACHE ViBoolean gs Boolean_values 
 "Specifies whether to cache the value of attributes.  "
 "When caching is enabled, the instrument driver keeps track of "
 "the current instrument settings and avoids sending redundant commands to "
 "the instrument.  Thus, you can significantly increase execution speed.\n"
 "    The instrument driver can choose always to cache or never to cache "
 "particular attributes regardless of the setting of this attribute.\n"
 "    The default value is VI_TRUE.   Use the "
 "pipx40_InitWithOptions function to override this value.\n"
 "    "
 
3 all "Simulate" PIPX40_ATTR_SIMULATE ViBoolean gs Boolean_values 
 "Specifies whether or not to simulate instrument driver I/O "
 "operations.  If simulation is enabled, instrument driver "
 "functions perform range checking and call Ivi_GetAttribute and "
 "Ivi_SetAttribute functions, but they do not perform instrument I/O.  "
 "For output parameters that represent instrument data, the instrument "
 "driver functions return calculated values.\n"
 "    The default value is VI_FALSE.   Use the "
 "pipx40_InitWithOptions function to override this value.\n"
 "    "
 
3 all "Record Value Coercions" PIPX40_ATTR_RECORD_COERCIONS ViBoolean gs Boolean_values       
 "Specifies whether the IVI engine keeps a list of "
 "the value coercions it makes for ViInt32 and ViReal64 attributes.  "  
 "You call pipx40_GetNextCoercionRecord to extract and delete the oldest "
 "coercion record from the list.\n"  
 "    The default value is VI_FALSE.   Use the "
 "pipx40_InitWithOptions function to override this value.\n"
 "    "

2 all "Driver Identification"
 "Attributes that provide identity and version information about this instrument driver.\n"
 "    "

3 all "Description" PIPX40_ATTR_SPECIFIC_DRIVER_DESCRIPTION ViString g
 "A string that contains a brief description of the specific "
 "driver\n"
 "    "

3 all "Driver Prefix" PIPX40_ATTR_SPECIFIC_DRIVER_PREFIX ViString g  
 "A string that contains the prefix for the instrument driver.  The name of each "
 "user-callable function in this driver starts with this prefix.\n"
 "    "

3 all "Driver Vendor" PIPX40_ATTR_SPECIFIC_DRIVER_VENDOR ViString g
 "A string that contains the name of the vendor that supplies this driver.\n"
 "    "

3 all "Major Version" PIPX40_ATTR_SPECIFIC_DRIVER_MAJOR_VERSION ViInt32 g 
 "The major version number of this instrument driver.\n"
 "    "

3 all "Minor Version" PIPX40_ATTR_SPECIFIC_DRIVER_MINOR_VERSION ViInt32 g 
 "The minor version number of this instrument driver.\n"
 "    "

3 all "Revision" PIPX40_ATTR_SPECIFIC_DRIVER_REVISION ViString g 
 "A string that contains additional version information about this "
 "instrument driver.\n"
 "    "

3 all "Class Specification Major Version" PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION ViInt32 g
 "The major version number of the class specification with which this driver is compliant.\n"
 "    "

3 all "Class Specification Minor Version" PIPX40_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION ViInt32 g
 "The minor version number of the class specification with which this driver is compliant.\n"
 "    "

2 all "Driver Capabilities"
 "Attributes that provide information about the capabilities of this instrument driver.\n"
 "    "

3 all "Supported Instrument Models" PIPX40_ATTR_SUPPORTED_INSTRUMENT_MODELS ViString  g
 "Contains a model code of the instrument. For drivers that support more than one device, this "
 "attribute contains a comma-separated list of supported instrument "
 "models.\n"
 "    "

3 all "Class Group Capabilities" PIPX40_ATTR_GROUP_CAPABILITIES ViString g
 "A string that contains a comma-separated list of class-extention groups that "
 "this driver implements.\n"
 "    "

3 all "Number of Channels" PIPX40_ATTR_NUM_CHANNELS ViInt32 g
 "Indicates the number of channels that the specific instrument "
 "driver supports.  \n"
 "    For each attribute for which the IVI_VAL_MULTI_CHANNEL flag attribute "
 "is set, the IVI engine maintains a separate cache value for each channel.\n"
 "    "

2 all "Instrument Identification" 
 "Attributes that provide identity information about the instrument that you are using."
 "    "

3 all "Manufacturer" PIPX40_ATTR_INSTRUMENT_MANUFACTURER ViString g
 "A string that contains the name of the instrument manufacturer you are currently "
 "using.\n"
 "    "

3 all "Model" PIPX40_ATTR_INSTRUMENT_MODEL ViString g
 "A string that contains the model number or name of the instrument that you "
 "are currently using.\n"
 "    "

3 all "Firmware Revision" PIPX40_ATTR_INSTRUMENT_FIRMWARE_REVISION ViString g
 "A string that contains the firmware revision information "
 "for the instrument you are currently using.\n"
 "    "

2 all "Error Info" 
 "Attributes for error information.\n"
 "    "

3 all "Primary Error" PIPX40_ATTR_PRIMARY_ERROR ViInt32 gs 
 "A code that describes the first error that occurred since the last "
 "call to pipx40_GetErrorInfo on the session.  The value follows the "
 "VXIplug&play completion code conventions.  A negative value describes "
 "an error condition.  A positive value describes a warning condition "
 "and indicates that no error occurred.  A zero indicates that no error "
 "or warning occurred. The error and warning values can be status codes "
 "defined by IVI, VISA, class drivers, or specific drivers.\n"
 "    "

3 all "Secondary Error" PIPX40_ATTR_SECONDARY_ERROR ViInt32   gs 
 "An optional code that provides additional information concerning the "
 "primary error condition.  The error and warning values can be status codes "
 "defined by IVI, VISA, class drivers, or specific drivers.  Zero indicates "
 "no additional information.\n"
 "    "

3 all "Error Elaboration" PIPX40_ATTR_ERROR_ELABORATION ViString  gs 
 "An optional string that contains additional information concerning the "
 "primary error condition.\n"
 "    "

2 all "Advanced Session Information" 
 "Attributes that contain additional information concerning the instrument driver session.  "
 "    "

3 all "Logical Name" PIPX40_ATTR_LOGICAL_NAME ViString  g
 "A string containing the logical name you specified when opening the "
 "current IVI session.\n"
 "     You may pass a logical name to the pipx40_init or "
 "pipx40_InitWithOptions functions.  "
 "The IVI Configuration utility must contain an entry for the logical name.  "
 "The logical name entry refers to a virtual instrument section in the "
 "IVI Configuration file.  The virtual instrument section specifies a physical "
 "device and initial user options.\n"
 "    "

3 all "Resource Descriptor" PIPX40_ATTR_RESOURCE_DESCRIPTOR ViString  g
 "Indicates the resource descriptor the driver "
 "uses to identify the physical device.\n"
 "    If you initialize the driver with a logical name, this "
 "attribute contains the resource descriptor that corresponds "
 "to the entry in the IVI Configuration utility.  \n"
 "    If you initialize the instrument driver with the resource "
 "descriptor, this attribute contains that value.\n"
 "    "

3 all "I/O Session Type" PIPX40_ATTR_IO_SESSION_TYPE ViString  g
 "Contains the type of the I/O session that this driver uses to communicate "
 "with the instrument. "
 "    "

3 all "Instrument I/O Session" PIPX40_ATTR_IO_SESSION ViSession g  
 "Specifies the I/O session that the specific driver uses "
 "to communicate with the instrument.\n"
 "    "

1 all "Channel Configuration"
 "Attributes you use to configure the characteristics "
 "of a particular channel on a switch module."
 
2 all "Is Source Channel" PIPX40_ATTR_IS_SOURCE_CHANNEL ViBoolean gs Boolean_values
 "This channel-based attribute specifies whether you want to identify the channel as a "
 "source channel.  Typically, you set this attribute to VI_TRUE when "
 "you attach the channel to a power supply, a function generator, or an active measurement "
 "point on the unit under test, and you do not want to connect the channel to "
 "another source.  The driver prevents source channels from connecting to each other.  The pipx40_Connect "
 "function returns the PIPX40_ERROR_ATTEMPT_TO_CONNECT_SOURCES when you "
 "attempt to connect two channels that you identify as source channels.\n"
 ""    "

2 all "Is Configuration Channel" PIPX40_ATTR_IS_CONFIGURATION_CHANNEL ViBoolean gs Boolean_values
 "This channel-based attribute specifies whether to reserve the channel "
 "for internal path creation.  A channel that is available for internal "
 "path creation is called a configuration channel.  The driver may use "
 "configuration channels to create paths between two channels you specify "
 "in the pipx40_Connect function.  Configuration channels "
 "are not available for external connections.\n"
 "    Set this attribute to VI_TRUE to "
 "mark the channel as a configuration channel.  Set this attribute to VI_FALSE "
 "to mark the channel as available for external connections.\n"
 "    After you identify a channel as a configuration channel, you cannot use that "
 "channel for external connections.  The pipx40_Connect function returns the "
 "PIPX40_ERROR_IS_CONFIGURATION_CHANNEL error when you attempt to "
 "establish a connection between a configuration channel and any other channel.\n"
 "    "

1 all "Module Characteristics"
 "Attributes you use to obtain the characteristics of the switch module.\n"
 "    Note: These attributes are channel-based.  The characteristics of all "
 "channels in a path determine the characteristics of the path.  For example, "
 "the maximum current that a path can carry is the minimum of the maximum "
 "carry currents of the individual switches in the path.\n"
 "    "

2 all "Is Debounced" PIPX40_ATTR_IS_DEBOUNCED ViBoolean g Boolean_values
 "This attribute indicates whether the entire switch module has settled "
 "since the last switching command.  A value of VI_TRUE indicates that "
 "all signals going through the switch module are valid.\n"
 "    "
 
2 all "Settling Time" PIPX40_ATTR_SETTLING_TIME ViReal64 gs
 "This channel-based attribute returns the maximum length of time from after "
 "you make a connection until the signal flowing through the channel "
 "settles.\n"
 "    The units are seconds.\n"
 "    "

2 all "Bandwidth" PIPX40_ATTR_BANDWIDTH ViReal64 g
 "This channel-based attribute returns the bandwidth for the channel.\n"
 "    The units are hertz.\n"
 "    "

2 all "Maximum DC Voltage" PIPX40_ATTR_MAX_DC_VOLTAGE ViReal64 g
 "This channel-based attribute returns the maximum DC voltage the channel "
 "can switch.\n"
 "    The units are volts.\n"
 "    "

2 all "Maximum AC Voltage" PIPX40_ATTR_MAX_AC_VOLTAGE ViReal64 g
 "This channel-based attribute returns the maximum AC voltage the channel "
 "can switch.\n"
 "    The units are volts RMS.\n"
 "    "

2 all "Maximum Switching DC Current" PIPX40_ATTR_MAX_SWITCHING_DC_CURRENT ViReal64 g
 "This channel-based attribute returns the maximum DC current the channel "
 "can switch.\n"
 "    The units are amperes.\n"
 "    "

2 all "Maximum Switching AC Current" PIPX40_ATTR_MAX_SWITCHING_AC_CURRENT ViReal64 g
 "This channel-based attribute returns the maximum AC current the channel "
 "can switch.\n"
 "    The units are amperes RMS.\n"
 "    "

2 all "Maximum Carry DC Current" PIPX40_ATTR_MAX_CARRY_DC_CURRENT ViReal64 g
 "This channel-based attribute returns the maximum DC current the channel "
 "can carry.\n"
 "    The units are amperes.\n"
 "    "

2 all "Maximum Carry AC Current" PIPX40_ATTR_MAX_CARRY_AC_CURRENT ViReal64 g
 "This channel-based attribute returns the maximum AC current the channel "
 "can carry.\n"
 "    The units are amperes RMS.\n"
 "    "

2 all "Maximum Switching DC Power" PIPX40_ATTR_MAX_SWITCHING_DC_POWER ViReal64 g
 "This channel-based attribute returns the maximum DC power the channel "
 "can switch.\n"
 "    The units are watts.\n"
 "    "

2 all "Maximum Switching AC Power" PIPX40_ATTR_MAX_SWITCHING_AC_POWER ViReal64 g
 "This channel-based attribute returns the maximum AC power the channel "
 "can switch.\n"
 "    The units are volt-amperes.\n"
 "    "

2 all "Maximum Carry DC Power" PIPX40_ATTR_MAX_CARRY_DC_POWER ViReal64 g
 "This channel-based attribute returns the maximum DC power the channel "
 "can carry.\n"
 "    The units are watts.\n"
 "    "

2 all "Maximum Carry AC Power" PIPX40_ATTR_MAX_CARRY_AC_POWER ViReal64 g
 "This channel-based attribute returns the maximum AC power the channel "
 "can carry.\n"
 "    The units are volt-amperes.\n"
 "    "

2 all "Characteristic Impedance" PIPX40_ATTR_CHARACTERISTIC_IMPEDANCE ViReal64 g
 "This channel-based attribute returns the characteristic impedance for "
 "the channel.\n"
 "    The units are ohms."
 "    "

1 all "Scanning Configuration"
 "Attributes you use to configure a switch module using a scan list string.\n"
 "    "
 
2 all "Scan List" PIPX40_ATTR_SCAN_LIST ViString gs
 "This attribute contains a scan list, which is a string that specifies channel "
 "connections and trigger conditions.  The pipx40_InitiateScan function makes "
 "or breaks connections and waits for triggers according to the instructions "
 "in the scan list.\n"
 "    The scan list is comprised of channel names that you separate with special "
 "characters.  These special characters determine the operations the scanner "
 "performs on the channels when it executes this scan list.\n"
 "\n"
 "To create a path between two channels, use the following character "
 "between the two channel names:\n"
 "    -> (a dash followed by a '>' sign)\n" 
 "Example: \"CH1->CH2\" tells the switch to make a path from channel CH1 "
 "to channel CH2.\n"
 "\n"
 "To break or clear a path, use the following character as a prefix before the path:\n"
 "    ~ (tilde)\n"
 "Example: \"~CH1->CH2\" tells the switch to break the path "
 "from channel CH1 to channel CH2.\n"
 "\n" 
 "To tell the switch module to wait for a trigger event, use the following "
 "character as a separator between paths:\n"
 "    ; (semicolon)\n"
 "Example: \"CH1->CH2;CH3->CH4\" tells the switch to make the "
 "path from channel CH1 to channel CH2, wait for a trigger, and then "
 "make the path from CH3 to CH4.\n"
 "\n"
 "To tell the switch module to create multiple paths simultaneously, "
 "use the following character as a separator between the paths:\n"
 "    , (comma)\n"
 "Example: \"A->B;CH1->CH2,CH3->CH4\" instructs the scanner to make the "
 "path between channels A and B, wait for a trigger, and then simultaneously "
 "make the paths between channels CH1 and CH2 and between channels CH3 "
 "and CH4.\n"
 "    "
 
2 all "Scan Mode" PIPX40_ATTR_SCAN_MODE ViInt32 gs attrScanModeRangeTable
 "This attribute specifies what happens to existing connections that conflict with "
 "the connections you make in a scan list.  For example, if CH1 is already connected "
 "to CH2 and the scan list instructs the switch module to connect CH1 to CH3, this attribute "
 "specifies what happens to the connection between CH1 and CH2.\n"
 "    If the value of this attribute is PIPX40_VAL_NONE, the switch module takes no action "
 "on existing paths.  If the value is PIPX40_VAL_BREAK_BEFORE_MAKE, the "
 "switch module breaks conflicting paths before making new ones.  If the value is "
 "PIPX40_VAL_BREAK_AFTER_MAKE, the switch module breaks conflicting "
 "paths after making new ones.\n" 
 "    Most switch modules support only one of the possible values.  "
 "In such cases, this attribute serves as an indicator of the module's behavior.\n"
 "    "

2 all "Continuous Scan" PIPX40_ATTR_CONTINUOUS_SCAN ViBoolean gs Boolean_values 
 "This attribute specifies whether the switch module continues scanning from the top of the scan list "
 "after reaching the end of the list.  A value of VI_TRUE indicates that the switch module continuously scans."
 "  A value of VI_FALSE indicates that the switch module does not continuously scan.\n"
 "    If you set this attribute to VI_TRUE, the function pipx40_WaitForScanComplete"
 " always times out, and you must call @REPALCE[Prefix]_Abort to stop the scan.\n"
 "    "

2 all "Trigger Input" PIPX40_ATTR_TRIGGER_INPUT ViInt32 gs attrTriggerInputRangeTable
 "This attribute specifies the source of the trigger for which the switch "
 "module can wait when processing a scan list.  The switch module waits for "
 "a trigger when it encounters a semicolon in a scan list.  When the trigger "
 "occurs, the switch module advances to the next entry in the scan list.\n"
 "    "

2 all "Scan Advanced Output" PIPX40_ATTR_SCAN_ADVANCED_OUTPUT ViInt32 gs attrScanAdvancedOutputRangeTable
 "This attribute specifies the method you want to use to notify another "
 "instrument that all signals going through the switch module have settled "
 "following the processing of one entry in the scan list.\n"
 "    "

2 all "Is Scanning" PIPX40_ATTR_IS_SCANNING ViBoolean g Boolean_values
 "This attribute indicates whether the switch module has completed the "
 "scan operation.  The value VI_TRUE indicates that the scan is complete."
 "    "

2 all "Scan Delay" PIPX40_ATTR_SCAN_DELAY ViReal64 gs
 "This attribute specifies the minimum amount of time the switch module "
 "waits before it asserts the scan advanced output trigger after opening "
 "or closing the switch.  The switch module always waits for debounce before "
 "asserting the trigger.  Thus, the actual delay will always be the greater "
 "value of the settling time and the value you specify as the switch delay.\n"
 "The units are seconds.\n"
 "    Due to different designs of the switch modules, the actual time "
 "might be longer.  "
 "    "

1 all "Matrix Configuration"
 "Attributes you use to configure a matrix switch module.\n" 
 "    "

2 all "Number of Rows" PIPX40_ATTR_NUM_OF_ROWS ViInt32 g
 "This attribute returns the number of rows of a matrix or "
 "scanner.  If the switch module is a scanner, this value is the number of "
 "output channels.\n"
 "    The PIPX40_ATTR_WIRE_MODE attribute affects the number "
 "of available rows.  For example, if your module has 2 output lines and "
 "you use the two-wire mode, then the number of rows you have available "
 "is 1.\n"
 "    "

2 all "Number of Columns" PIPX40_ATTR_NUM_OF_COLUMNS ViInt32 g
 "This attribute returns the number of columns of a matrix "
 "or scanner.  If the switch module is a scanner, this value is the number "
 "of input channels.\n"
 "    The PIPX40_ATTR_WIRE_MODE attribute affects the number "
 "of available columns.  For example, if your module has 8 input lines and "
 "you use the four-wire mode, then the number of columns you have available "
 "is 2.\n"
 "    "
 
2 all "Wire mode" PIPX40_ATTR_WIRE_MODE ViInt32 g
 "This attribute specifies the wire mode of the switch module.\n"
 "    This attribute affects the values of the PIPX40_ATTR_NUM_OF_ROWS "
 "and PIPX40_ATTR_NUM_OF_COLUMNS attributes.   The actual number of input "
 "and output lines on the switch module is fixed, but the number of channels "
 "depends on how many lines constitute each channel.\n"
 "    "

1 all "Miscellaneous Attributes" "Additional Attributes."

2 all "Manufacturer ID" PIPX40_ATTR_VXI_MANF_ID ViInt32 g 
 "Returns the manufacturer identification number of the VXIbus device.  "
 "The instrument driver gets the value of this attribute when you pass "
 "VI_TRUE for the ID Query parameter to the pipx40_init or "
 "pipx40_InitWithOptions function.\n"
 "    "

2 all "Model Code" PIPX40_ATTR_VXI_MODEL_CODE ViInt32 g 
 "Returns the model code for the VXIbus device.  "
 "The instrument driver gets the value of this attribute when you pass "
 "VI_TRUE for the ID Query parameter to the pipx40_init or "
 "pipx40_InitWithOptions function.\n"
 "    "


 

2 all "Hidden Attributes (not user-viewable)" 
 "    "

3 all "Channel Matrix" PIPX40_ATTR_CHANNEL_MATRIX ViAddr hidden 
 "This attribute holds the pointer to the matrix data structure that keeps "
 "the information about current state of the switch connections.\n"
 "    "

3 all "Original Source Channel Index" PIPX40_ATTR_ORIGINAL_SOURCE_CHANNEL_INDEX ViInt32 hidden 
 "Specifies the index of the source channel this channel connects to.\n"
 "    "

3 all "Configuration Channel Index" PIPX40_ATTR_CONFIGURATION_CHANNEL_INDEX ViInt32 hidden 
 "Specifies the index of the channel that connects to a configuration "
 "channel  .\n"
 "    "

3 all "Maximum Depth" PIPX40_ATTR_MAXIMUM_DEPTH ViInt32 hidden 
 "Specifies the maximum depth for the recursions that traverse the matrix "
 "for finding the possible or existing path between the channels.  If the "
 "recursion reaches the maximum depth without establishing the path, it "
 "returns the path not found status.  If this value is set to 0, then "
 "there is no limit in search for the path.  This may cause the search "
 "algorithm to appear locked to the user in cases where switch has a "
 "lot of configuration channels.\n"
 "    "

3 all "Is Mux Channel" PIPX40_ATTR_IS_MUX_CHANNEL ViBoolean hidden Boolean_values 
 "This channel-based attribute marks the channel as the common chanel on the "
 "multiplexer switch module. Such channels cannot connect to more than one "
 "other channel at any moment.\n"
 "    "

3 all "Settling Moment" PIPX40_ATTR_SETTLING_MOMENT ViReal64 hidden 
 "This attribute contains the moment in time when the switch debounces.  Use "
 "this attribute only if your instrument does not support querying the "
 "status to determine if the switch has debounced.\n"
 "    "

3 all "OPC Callback Timeout" PIPX40_ATTR_OPC_TIMEOUT ViInt32 hidden 
 "This attribute is hidden.  The driver uses this attribute internally to set the "
 "timeout for the OPC callback.\n"
 "    "



